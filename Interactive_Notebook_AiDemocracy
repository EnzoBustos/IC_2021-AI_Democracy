{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":" Interactive_Notebook_AiDemocracy","provenance":[],"authorship_tag":"ABX9TyPiXw9VEY3O0o5aK3KjjQs9"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"U9Z4kx3EAyL_"},"source":["# $$ AI \\space Democracy - A\\space case\\space study\\space on\\space corruption\\space citations $$\n","\n","---\n","\n","<p align=\"justify\">A corrupção é a barreira número #1 ao desenvolvimento e o motor  principal da desigualdade em Portugal. Nesse sentido, propomos o uso de ferramenteas de análise de dados e de PLN para extrair, processar e abstrair informações relevantes no âmbito da corrupção em Portugal.</p>\n","\n","<p align=\"justify\"> A ideia principal é dessenvolver ferramentas que permitam ao público geral a possibilidade de acompanhar e seguir os passos políticos dos seus representandes dentro do Parlamento, de uma forma fácil e acessível a todos através de uma interface de visualização gráfica clara dos dados. </p>"]},{"cell_type":"markdown","metadata":{"id":"f3ojf9ItJ5lH"},"source":["# Data"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"JBz_gM8hThMN","executionInfo":{"status":"ok","timestamp":1632286720332,"user_tz":180,"elapsed":1326,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjeqtCv_2zHtu64b7C2Lmv5UyFqai7wm3a8N8GE8w=s64","userId":"00423683093258305256"}},"outputId":"e08bf3cb-38a1-49f6-eb5d-2da95434c127"},"source":["#@title #**Importando bibliotecas principais** {run: \"auto\", display-mode: \"form\" }\n","\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import numpy as np\n","import bokeh\n","import re\n","import time\n","import nltk\n","from IPython.core.display import display, HTML\n","import os\n","from matplotlib.colors import *\n","import matplotlib.image as mpimg\n","import matplotlib as mpl\n","import copy\n","import imageio\n","import math\n","from IPython.display import Image\n","import PIL\n","\n","def color_text(text, color):\n","    colors = {\n","        \"r\" : \"#F00\",\n","        \"g\" : \"#0F0\",\n","        \"b\" : \"#00F\",\n","        \"y\" : \"#FF0\",\n","        \"c\" : \"#0FF\",\n","        \"p\" : \"#F0F\",\n","    }\n","\n","    css_str = '<style>.Color{color:' + colors[color] +';}</style>'\n","    html_str = '<div class=\"Color\"><b>' + text + '</b></div>'\n","    html = HTML(css_str + html_str)\n","    display(html)\n","    display(HTML(\"\"))\n","\n","time.sleep(0.3)\n","color_text('Concluído com sucesso!', 'g')"],"execution_count":1,"outputs":[{"output_type":"display_data","data":{"text/html":["<style>.Color{color:#0F0;}</style><div class=\"Color\"><b>Concluído com sucesso!</b></div>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{}},{"output_type":"display_data","data":{"text/html":[""],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"sXLVspVET_Q-","executionInfo":{"status":"ok","timestamp":1632286720333,"user_tz":180,"elapsed":13,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjeqtCv_2zHtu64b7C2Lmv5UyFqai7wm3a8N8GE8w=s64","userId":"00423683093258305256"}},"outputId":"7c2ea082-9c45-43c8-db0a-fcbd619ade5a"},"source":["#@title #**Selecione um set de keywords:** {run: \"auto\", display-mode: \"form\" }\n","\n","def get_derivatives(keywords):\n","    if keywords != \"Corrupcao\":\n","        color_text('Alerta: Atualmente nosso banco de palavras só conta com o tema \"Corrupção\"!', 'y')\n","    else:\n","        color_text('Concluído com sucesso!', 'g')\n","    return ['corrup']\n","\n","keywords = \"Corrupcao\" #@param [\"Corrupcao\", \"Meio Ambiente\", \"Educacao\", \"Saude\"]\n","\n","corruption_words = get_derivatives(keywords)"],"execution_count":2,"outputs":[{"output_type":"display_data","data":{"text/html":["<style>.Color{color:#0F0;}</style><div class=\"Color\"><b>Concluído com sucesso!</b></div>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{}},{"output_type":"display_data","data":{"text/html":[""],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"FVq7CMEFUAza","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1632286720335,"user_tz":180,"elapsed":13,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjeqtCv_2zHtu64b7C2Lmv5UyFqai7wm3a8N8GE8w=s64","userId":"00423683093258305256"}},"outputId":"478e3ecc-2892-4cba-9aed-a60534a05ed1"},"source":["#@title #**Selecione um intervalo de datas de 2020-09-17 até 2021-02-26:** {run: \"auto\", display-mode: \"form\" }\n","\n","date_start = \"2020-09-17\" #@param{type: \"date\"}\n","date_final = \"2021-02-26\"#@param{type: \"date\"}\n","    \n","def validate_dates(date_start, date_final):\n","    if date_start < \"2020-09-17\":\n","        color_text('Input de data inválido: Datas válidas começam em 2020-09-17', 'r')\n","        return None, None\n","    elif date_final > \"2021-02-26\":\n","        color_text('Input de data inválido: Datas válidas terminam em 2021-02-26', 'r')\n","        return None, None\n","    elif date_start > date_final:\n","        color_text('Aviso: Parece que você inverteu a ordem das datas, foi corrigido para você', 'y')\n","        temp = date_start\n","        date_start, date_final = date_final, date_start\n","        return date_start, date_final\n","    else:\n","        color_text('Concluído com sucesso!', 'g')\n","        return date_start, date_final\n","\n","date_start, date_final = validate_dates(date_start, date_final)"],"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/html":["<style>.Color{color:#0F0;}</style><div class=\"Color\"><b>Concluído com sucesso!</b></div>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{}},{"output_type":"display_data","data":{"text/html":[""],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"BAWliAMKUDLO","colab":{"base_uri":"https://localhost:8080/","height":86},"executionInfo":{"status":"ok","timestamp":1632286721516,"user_tz":180,"elapsed":1193,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjeqtCv_2zHtu64b7C2Lmv5UyFqai7wm3a8N8GE8w=s64","userId":"00423683093258305256"}},"outputId":"30fc6c41-a72f-472b-98f7-a79c450518b8"},"source":["#@title #**Carregando dados** {run: \"auto\", display-mode: \"form\" }\n","\n","import re\n","\n","projects = pd.read_csv(\"/content/iniciativas.csv\")\n","projects.drop('Unnamed: 0', axis=1, inplace=True)\n","projects.columns = ['type', 'number', 'session', 'authorship', 'description', 'url']\n","projects['title'] = projects['type'] + ' ' + projects['number']\n","dialogs =  pd.read_csv(\"/content/dialog_lines_database_initiatives.csv\")\n","#dialogs.drop(['Y_true'], axis = 1, inplace=True)\n","#dialogs.drop(['Y_true', 'Tokenized_Text', 'Clean_Tokens', 'Normalized_Tokens',\n"," #      'Vectors', 'Normalized_Tokens_String'], axis = 1, inplace=True)\n","\n","#dialogs.drop('Unnamed: 0', axis=1, inplace=True)\n","\n","def find_words(data_frame, fields, words):\n","    series = [data_frame[field] for field in fields]\n","    positions = pd.DataFrame()\n","    for serie in series:\n","        for word in words:\n","            positions[serie.name+'_'+word+\"_pos\"] = serie.str.lower().str.find(word)\n","    return positions\n","\n","def get_citations(data_frame, fields, words):\n","    positions = find_words(data_frame, fields, words)\n","    out_list = [] # pd.DataFrame(columns = data_frame.columns)\n","    i = 0\n","    for ind in positions.index:\n","        has_found = False\n","        for field_word in positions:\n","            if (positions[field_word][ind] != -1):\n","                has_found = True\n","                break\n","        if(has_found):\n","            #print(data_frame.iloc[ind].values)\n","            out_list.append(data_frame.iloc[ind].values)\n","            i = i + 1\n","    return pd.DataFrame(out_list, columns = data_frame.columns)\n","\n","def get_related(full_dataframe, citation_dataframe, key_fields):\n","    citation_dataframe['key'] = citation_dataframe[key_fields[0]]\n","    full_dataframe['key'] = full_dataframe[key_fields[0]]\n","    for i in range(1, len(key_fields)):\n","        citation_dataframe['key'] = citation_dataframe['key'] + citation_dataframe[key_fields[i]]\n","        full_dataframe['key'] = full_dataframe['key'] + full_dataframe[key_fields[i]]\n","    topics = citation_dataframe['key'].unique()\n","    #print(topics)\n","    to_out = pd.DataFrame(columns = full_dataframe.columns)\n","    for topic in topics:\n","        to_out = to_out.append(full_dataframe.loc[full_dataframe['key'] == topic])\n","    return to_out\n","\n","def get_related_projects(citations_df, projects_df):\n","    #print(citations_df['Subject'].unique())\n","    to_out = pd.DataFrame(columns = projects_df.columns)\n","    for subject in [str(sub) for sub in citations_df['Initiatives'].unique()]:\n","        #print('subject', subject)\n","        titles = subject.split(', ')\n","        for title in titles:\n","            to_out = to_out.append(projects_df.loc[projects_df['title'] == title])\n","    return to_out\n","\n","def clean(citations):\n","    citations.dropna(axis=0, inplace=True)\n","\n","    not_politicians = ['Presidente', 'Secretária', 'Secretário', 'Ministra', 'Ministro']\n","    for not_politician in not_politicians:\n","        citations.loc[citations['Person'].str.contains(not_politician), 'Party'] = np.nan\n","    citations.dropna(axis=0, inplace=True)\n","\n","    citations.replace(to_replace='Partido Socialista', value='PS', inplace=True)\n","    citations.replace(to_replace='SD', value=np.nan, inplace=True)\n","    citations.replace(to_replace='N insc.', value=np.nan, inplace=True)\n","\n","    #Arrumando nomes que não tinham o devido espaçamento\n","    regex = re.compile(\"[a-zá-ú][A-Z]\")\n","    for i in range(3):\n","        for person in citations['Person']:\n","            person = str(person)\n","            match = re.search(regex, person)\n","            if match:\n","                citations['Person'].replace(to_replace=person,\n","                                            value=person[:match.start()+1] + \" \" + person[match.end()-1:],\n","                                            inplace=True)\n","    for col in ['Person', 'Text']:\n","        citations[col].replace(to_replace='Rosário Gamboa', value='Rosário Gambôa', inplace=True)\n","        citations[col].replace(to_replace='António Malo de Abreu', value='António Maló de Abreu', inplace=True)\n","        citations[col].replace(to_replace='Inês de Sousa Leal', value='Inês de Sousa Real', inplace=True)\n","        citations[col].replace(to_replace='Vera Brás', value='Vera Braz', inplace=True)\n","        citations[col].replace(to_replace='Nélson Basílio Silva', value='Nelson Basílio Silva', inplace=True)\n","        citations[col].replace(to_replace='André Pinotes Baptista', value='André Pinotes Batista', inplace=True)\n","        citations[col].replace(to_replace='Claúdia Santos', value='Cláudia Santos', inplace=True)\n","        citations[col].replace(to_replace='Secretáriode Estado do Comércio, Serviços e Defesa do Consumidor',\n","                               value='Secretário de Estado do Comércio, Serviços e Defesa do Consumidor', inplace=True)\n","        citations[col].replace(to_replace='Secretáriade Estado da Habitação',\n","                               value='Secretária de Estado da Habitação', inplace=True)\n","        citations[col].replace(to_replace='Maria Antónia Almeida Santos',\n","                               value='Maria Antónia de Almeida Santos', inplace=True)\n","\n","    citations.replace(to_replace='Partido Socialista', value='PS', inplace=True)\n","    citations.replace(to_replace='SD', value=np.nan, inplace=True)\n","    citations.replace(to_replace='N insc.', value=np.nan, inplace=True)\n","    citations['Person'].replace(to_replace='António Malo de Abreu', value='António Maló de Abreu', inplace=True)\n","    citations['Person'].replace(to_replace='AndréSilva', value='André Silva', inplace=True)\n","    citations['Person'].replace(to_replace='Inês de Sousa Leal', value='Inês de Sousa Real', inplace=True)\n","    citations['Person'].replace(to_replace='AntónioFilipe', value='António Filipe', inplace=True)\n","    citations['Person'].replace(to_replace='PedroDelgadoAlves', value='Pedro Delgado Alves', inplace=True)\n","    citations['Person'].replace(to_replace='PedroFilipeSoares', value='Pedro Filipe Soares', inplace=True)\n","    citations['Person'].replace(to_replace='Ana Catarina MendonçaMendes', value='Ana Catarina Mendonça Mendes', inplace=True)\n","    return citations\n","\n","direct_citations = clean(get_citations(dialogs, ['Text'], corruption_words))\n","direct_projects = get_citations(projects, ['description'], corruption_words)\n","indirect_citations = clean(get_related(dialogs, direct_citations, ['Date', 'Initiatives']))\n","indirect_projects = get_related_projects(direct_citations, projects)\n","\n","def load_infos(custom_info_dict=None):\n","    if custom_info_dict == None:\n","            infos = {\n","                'PS'     : {\n","                    'color' : '#FF66FF',\n","                    'orientation' : 'Esquerda',\n","                    'url_image' : 'http://www.cne.pt/sites/default/files/partido4_0.gif',\n","                    'coordinates' : (-2.5, 3.1),\n","                },\n","                'PSD'    : {\n","                    'color' : '#F68A21',\n","                    'orientation' : 'Direita',\n","                    'url_image' : 'http://www.cne.pt/sites/default/files/partido3_1.gif',\n","                    'coordinates' : (1.6, -1),\n","                },\n","                'BE'     : {\n","                    'color' : '#D21F1B',\n","                    'orientation' : 'Esquerda',\n","                    'url_image' : 'http://www.cne.pt/sites/default/files/partido14_0.gif',\n","                    'coordinates' : (-3.5, 0.5),\n","                },\n","                'PCP'    : {\n","                    'color' : '#FF0000',\n","                    'orientation' : 'Esquerda',\n","                    'url_image' : 'http://www.cne.pt/sites/default/files/partido1_0.gif',\n","                    'coordinates' : (-3.5, -4.7),\n","                },\n","                'CDS-PP' : {\n","                    'color' : '#0091DC',\n","                    'orientation' : 'Direita',\n","                    'url_image' : 'http://www.cne.pt/sites/default/files/partido2_0.gif',\n","                    'coordinates' : (2.5, -2.1),\n","                },\n","                'PAN'    : {\n","                    'color' : '#036A84',\n","                    'orientation' : 'Esquerda',\n","                    'url_image' : 'http://www.cne.pt/sites/default/files/pan_2014.jpg',\n","                    'coordinates' : (-3.4, 3.2),\n","                },\n","                'PEV'    : {\n","                    'color' : '#73BE43',\n","                    'orientation' : 'Esquerda',\n","                    'url_image' : 'http://www.cne.pt/sites/default/files/partido10_0.gif',\n","                    'coordinates' : (-2.1, -2.5),\n","                },\n","                'CH'     : {\n","                    'color' : '#333399',\n","                    'orientation' : 'Direita',\n","                    'url_image' : 'http://www.cne.pt/sites/default/files/partido_chega.png',\n","                    'coordinates' : (5, -3.6),\n","                },\n","                'IL'     : {\n","                    'color' : '#00AEEE',\n","                    'orientation' : 'Direita',\n","                    'url_image' : 'http://www.cne.pt/sites/default/files/partido_liberal.png',\n","                    'coordinates' : (1, 0.5) #???,\n","                },\n","                'JPP'    : {\n","                    'color' : '#0E766D',\n","                    'orientation' : 'Centro',\n","                    'url_image' : 'http://www.cne.pt/sites/default/files/partido_jpp.jpg',\n","                    'coordinates' : (0, 0) #???,\n","                },\n","                'PPM'    : {\n","                    'color' : '#014A94',\n","                    'orientation' : 'Direita',\n","                    'url_image' : 'http://www.cne.pt/sites/default/files/partido5_0.gif',\n","                    'coordinates' : (1.25, -2.1) #???,\n","                },\n","                'NC'     : {\n","                    'color' : '#FEAB19',\n","                    'orientation' : 'Direita',\n","                    'url_image' : 'http://www.cne.pt/sites/default/files/partido_nos_cidadaos.jpg',\n","                    'coordinates' : (0, 0.9) #???,\n","                },\n","                'L'      : {\n","                    'color' : '#98C75A',\n","                    'orientation' : 'Esquerda',\n","                    'url_image' : 'http://www.cne.pt/sites/default/files/livre.png',\n","                    'coordinates' : (-4.6, 2.7),\n","                },\n","            }\n","            return infos\n","    else:\n","        return custom_info_dict\n","\n","'''\n","def carregamento():\n","    bar = \"|\" + \"-\"*32 + \"|\"\n","    wait = list(np.random.rand(10))\n","\n","    print(\"Collecting Databases from the origin\", '\\n')\n","\n","    for i in range(10):\n","        bar = bar.replace('-', '█', 3)\n","        print('\\t', bar + str(i*10) + \"%\")\n","        time.sleep(wait[i])\n","    print('\\t', \"|████████████████████████████████|100%\", '\\n')\n","    color_text('Successfully load Minutes_Database.csv and Initiatives.csv', 'g')\n","carregamento()\n","'''"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'\\ndef carregamento():\\n    bar = \"|\" + \"-\"*32 + \"|\"\\n    wait = list(np.random.rand(10))\\n\\n    print(\"Collecting Databases from the origin\", \\'\\n\\')\\n\\n    for i in range(10):\\n        bar = bar.replace(\\'-\\', \\'█\\', 3)\\n        print(\\'\\t\\', bar + str(i*10) + \"%\")\\n        time.sleep(wait[i])\\n    print(\\'\\t\\', \"|████████████████████████████████|100%\", \\'\\n\\')\\n    color_text(\\'Successfully load Minutes_Database.csv and Initiatives.csv\\', \\'g\\')\\ncarregamento()\\n'"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"dmjMLUTNJ1i4"},"source":["# Other Graphs"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":492},"id":"EIY11tedNq7G","executionInfo":{"status":"ok","timestamp":1632286722755,"user_tz":180,"elapsed":1242,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjeqtCv_2zHtu64b7C2Lmv5UyFqai7wm3a8N8GE8w=s64","userId":"00423683093258305256"}},"outputId":"34c2bf55-e429-4846-aab1-008bff079df1"},"source":["#@title #**Estatísticas gerais das pessoas** { display-mode: \"form\" }\n","\n","def people_statistics(direct_citations, indirect_citations, number=25):\n","    fig, axs = plt.subplots(1, 2, constrained_layout=True, figsize=(16,8))\n","    #fig.suptitle('Gráficos de Estatísticas básicas de Pessoas')\n","    axs[0].set_title('Direct Participation of Congressmembers', fontweight='bold', fontsize=16)\n","    axs[1].set_title('Indirect Participation of Congressmembers', fontweight='bold', fontsize=16)\n","\n","    sns.countplot(ax=axs[0], x='Person', data= direct_citations,\n","                  order=direct_citations['Person'].value_counts().iloc[:number].index)\n","    sns.countplot(ax=axs[1], x='Person', data= indirect_citations[-(indirect_citations['Person'] == 'Presidente')],\n","                  order=indirect_citations['Person'].value_counts().iloc[:number].index)\n","    \n","    axs[0].set_xlabel('Congressperson', fontstyle='italic', fontsize=12)\n","    axs[1].set_xlabel('Congressperson', fontstyle='italic', fontsize=12)\n","    axs[0].set_ylabel('Count', fontstyle='italic', fontsize=12)\n","    axs[1].set_ylabel('Count', fontstyle='italic', fontsize=12)\n","\n","    axs[0].tick_params(axis='x', rotation=45)\n","    axs[1].tick_params(axis='x', rotation=45)\n","\n","    plt.savefig(\"my_plot.pdf\", format='pdf', dpi=500)\n","    plt.show()\n","\n","    plt.show()\n","\n","people_statistics(direct_citations, indirect_citations, 10)"],"execution_count":5,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x576 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":492},"id":"w-yTp1RmN5Id","executionInfo":{"status":"ok","timestamp":1632286723547,"user_tz":180,"elapsed":796,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjeqtCv_2zHtu64b7C2Lmv5UyFqai7wm3a8N8GE8w=s64","userId":"00423683093258305256"}},"outputId":"0f1d6571-b2f2-465f-9493-1fcea0c3a087"},"source":["#@title #**Estatísticas gerais dos partidos** { display-mode: \"form\" }\n","\n","sns.set_context(\"paper\")\n","#plt.figsize = (8, 6)\n","\n","def parties_statistics(direct_citations, indirect_citations, infos=load_infos()):\n","    \n","    party_colors = {}\n","    for party in infos:\n","        party_colors[party] = infos[party]['color']\n","    \n","    fig, axs = plt.subplots(1, 2, constrained_layout=True, figsize=(16,8))\n","    #fig.suptitle('Party Participation Statistics Graph', fontsize='large', fontweight='bold')\n","    axs[0].set_title('Direct Participation of Parties', fontweight='bold', fontsize=16)\n","    axs[1].set_title('Indirect Participation of Parties', fontweight='bold', fontsize=16)\n","\n","    sns.countplot(ax=axs[0], x='Party',\n","                  data= direct_citations, palette=party_colors,\n","                  order=direct_citations['Party'].value_counts().index)\n","    \n","    sns.countplot(ax=axs[1], x='Party', \n","                  data= indirect_citations, palette=party_colors,\n","                  order=indirect_citations['Party'].value_counts().index)\n","\n","    axs[0].set_xlabel('Parties', fontstyle='italic', fontsize=12)\n","    axs[1].set_xlabel('Parties', fontstyle='italic', fontsize=12)\n","    axs[0].set_ylabel('Count', fontstyle='italic', fontsize=12)\n","    axs[1].set_ylabel('Count', fontstyle='italic', fontsize=12)\n","\n","    plt.savefig(\"my_plot.pdf\", format='pdf', dpi=500)\n","    plt.show()\n","\n","parties_statistics(direct_citations, indirect_citations)"],"execution_count":6,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x576 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":891},"id":"0BJhcnQnWyOQ","executionInfo":{"status":"error","timestamp":1632286724413,"user_tz":180,"elapsed":878,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjeqtCv_2zHtu64b7C2Lmv5UyFqai7wm3a8N8GE8w=s64","userId":"00423683093258305256"}},"outputId":"99891e28-a48a-482a-ba8e-429e4bfc3674"},"source":["#@title #**Estatísticas das participações legislativas partidos** { display-mode: \"form\" }\n","\n","def parties_projects(direct_projects, indirect_projects, infos=load_infos()):\n","    \n","    party_colors = {}\n","    for party in infos:\n","        party_colors[party] = infos[party]['color']\n","    party_colors['PAR'] = '#a8a232'\n","    party_colors['CACDLG'] = '#8332a8'\n","\n","\n","    fig, axs = plt.subplots(1, 2, constrained_layout=False, figsize=(16,8))\n","    fig.suptitle('Gráficos de participacões lesgislativas dos Partidos')\n","    axs[0].set_title('Participação direta de Partidos')\n","    axs[1].set_title('Participação indireta de Partidos')\n","\n","    sns.countplot(ax=axs[0], x='authorship',\n","                  data= direct_projects, palette=party_colors,\n","                  order=direct_projects['authorship'].value_counts().index)\n","    \n","    sns.countplot(ax=axs[1], x='authorship', \n","                  data= indirect_projects, palette=party_colors,\n","                  order=indirect_projects['authorship'].value_counts().index)\n","\n","    axs[0].tick_params(axis='x', rotation=90)\n","    axs[1].tick_params(axis='x', rotation=90)\n","    \n","    plt.show()\n","\n","indirect_projects['authorship'].loc[indirect_projects['authorship'] == 'Comissão de Assuntos Constitucionais, Direitos, Liberdades e Garantias'] = 'CACDLG'\n","\n","parties_projects(direct_projects, indirect_projects)"],"execution_count":7,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-605d7ca898ab>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0mindirect_projects\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'authorship'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindirect_projects\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'authorship'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'Comissão de Assuntos Constitucionais, Direitos, Liberdades e Garantias'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'CACDLG'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m \u001b[0mparties_projects\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdirect_projects\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindirect_projects\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-7-605d7ca898ab>\u001b[0m in \u001b[0;36mparties_projects\u001b[0;34m(direct_projects, indirect_projects, infos)\u001b[0m\n\u001b[1;32m     21\u001b[0m     sns.countplot(ax=axs[1], x='authorship', \n\u001b[1;32m     22\u001b[0m                   \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mindirect_projects\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpalette\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparty_colors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m                   order=indirect_projects['authorship'].value_counts().index)\n\u001b[0m\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m     \u001b[0maxs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtick_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'x'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrotation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m90\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     44\u001b[0m             )\n\u001b[1;32m     45\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36mcountplot\u001b[0;34m(x, y, hue, data, order, hue_order, orient, color, palette, saturation, dodge, ax, **kwargs)\u001b[0m\n\u001b[1;32m   3600\u001b[0m         \u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mci\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_boot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0munits\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseed\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3601\u001b[0m         \u001b[0morient\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpalette\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msaturation\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3602\u001b[0;31m         \u001b[0merrcolor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrwidth\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcapsize\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdodge\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3603\u001b[0m     )\n\u001b[1;32m   3604\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, x, y, hue, data, order, hue_order, estimator, ci, n_boot, units, seed, orient, color, palette, saturation, errcolor, errwidth, capsize, dodge)\u001b[0m\n\u001b[1;32m   1584\u001b[0m         self.establish_variables(x, y, hue, data, orient,\n\u001b[1;32m   1585\u001b[0m                                  order, hue_order, units)\n\u001b[0;32m-> 1586\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mestablish_colors\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpalette\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msaturation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1587\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mestimate_statistic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mci\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_boot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseed\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1588\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36mestablish_colors\u001b[0;34m(self, color, palette, saturation)\u001b[0m\n\u001b[1;32m    317\u001b[0m         \u001b[0;31m# Determine the gray color to use for the lines framing the plot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0mlight_vals\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mcolorsys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrgb_to_hls\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrgb_colors\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 319\u001b[0;31m         \u001b[0mlum\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlight_vals\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m.6\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    320\u001b[0m         \u001b[0mgray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmpl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrgb2hex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlum\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlum\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlum\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    321\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: min() arg is an empty sequence"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x576 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":529},"id":"EzSMwV4cOTMO","executionInfo":{"status":"ok","timestamp":1632287220075,"user_tz":180,"elapsed":1598,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjeqtCv_2zHtu64b7C2Lmv5UyFqai7wm3a8N8GE8w=s64","userId":"00423683093258305256"}},"outputId":"17d435c9-ad0f-4708-dc3d-da8a67de8aab"},"source":["#@title #**Estatísticas das pessoas dos partidos** {run: \"auto\", display-mode: \"form\" }\n","\n","def persons_byparty_statistics(direct_citations, indirect_citations, party, number=25, infos=load_infos()):\n","    direct_party = direct_citations.loc[direct_citations['Party'] == party]\n","    indirect_party = indirect_citations.loc[indirect_citations['Party'] == party]\n","\n","    sns.set_context(\"paper\")\n","    plt.style.available\n","    plt.style.use('seaborn')\n","    plt.rc('font', family='serif')\n","\n","    sns.set(font_scale=1.5, rc={'text.usetex' : False})\n","    plt.rc('font', family='serif')\n","\n","    fig, axs = plt.subplots(1, 2, constrained_layout=True, figsize=(16,6))\n","    fig.suptitle('Gráficos de Estatísticas básicas das Pessoas do {}'.format(party), fontweight='bold', fontsize=14)\n","    axs[0].set_title('Participação direta de Pessoas do {}'.format(party), fontweight='bold', fontsize=12)\n","    axs[1].set_title('Participação indireta de Pessoas do {}'.format(party), fontweight='bold', fontsize=12)\n","\n","    party_color = infos[party]['color']\n","    \n","    if len(direct_party) >= number:\n","        cmap = LinearSegmentedColormap.from_list('My_cmap', colors=['#E8E8E8', party_color], N=number)\n","        cmap = [rgb2hex(cmap(i)) for i in range(cmap.N)]\n","        cmap = cmap[::-1]\n","        sns.countplot(ax=axs[0], x='Person',\n","                data= direct_party,\n","                palette=cmap,\n","                order=direct_party['Person'].value_counts().iloc[:number].index)\n","    elif len(direct_party) > 0:\n","        cmap = LinearSegmentedColormap.from_list('My_cmap', colors=['#E8E8E8', party_color], N=len(direct_party['Person'].unique()))\n","        cmap = [rgb2hex(cmap(i)) for i in range(cmap.N)]\n","        cmap = cmap[::-1]\n","        sns.countplot(ax=axs[0], x='Person',\n","                data= direct_party,\n","                palette=cmap,\n","                order=direct_party['Person'].value_counts().iloc[:number].index)\n","    else:\n","        axs[0].text(\n","            x=1.75/15.5,\n","            y=0.5,\n","            s='Dados insuficientes para geração do gráfico',\n","            fontdict = dict(size=16, color='black', fontweight='bold')\n","        )\n","        \n","    if len(indirect_party) >= number:\n","        cmap = LinearSegmentedColormap.from_list('My_cmap', colors=['#E8E8E8', party_color], N=number)\n","        cmap = [rgb2hex(cmap(i)) for i in range(cmap.N)]\n","        cmap = cmap[::-1]\n","        sns.countplot(ax=axs[1], x='Person',\n","                data= indirect_party,\n","                palette=cmap,\n","                order=indirect_party['Person'].value_counts().iloc[:number].index)\n","    else:\n","        cmap = LinearSegmentedColormap.from_list('My_cmap', colors=['#E8E8E8', party_color], N=len(indirect_party['Person'].unique()))\n","        cmap = [rgb2hex(cmap(i)) for i in range(cmap.N)]\n","        cmap = cmap[::-1]\n","        sns.countplot(ax=axs[1], x='Person',\n","                data= indirect_party,\n","                palette=cmap,\n","                order=indirect_party['Person'].value_counts().iloc[:number].index)\n","    \n","    axs[0].tick_params(axis='x', rotation=90, labelsize=8)\n","    axs[1].tick_params(axis='x', rotation=90, labelsize=8)\n","\n","    axs[0].set_xlabel('Deputado', fontstyle='italic', fontsize=10)\n","    axs[1].set_xlabel('Deputado', fontstyle='italic', fontsize=10)\n","\n","    axs[0].set_ylabel('Contagem', fontstyle='italic', fontsize=10)\n","    axs[1].set_ylabel('Contagem', fontstyle='italic', fontsize=10)\n","\n","\n","    plt.show()\n","\n","#@markdown Selecione um partido\n","partido = 'PSD' #@param['BE', 'CDS-PP', 'CH', 'IL', 'PAN', 'PCP', 'PEV', 'PS', 'PSD']\n","persons_byparty_statistics(direct_citations, indirect_citations, partido)\n","\n","'''\n","import matplotlib.pyplot as plt\n","sns.set_context(\"paper\")\n","plt.style.available\n","plt.style.use('seaborn')\n","\n","sns.set_palette(sns.color_palette(\"tab10\"))\n","\n","plt.rc('font', family='serif')\n","\n","sns.set(font_scale=1.5, rc={'text.usetex' : False})\n","plt.rc('font', family='serif')\n","#plt.style.use('tex')\n","\n","fig, axs = plt.subplots(2, 2, constrained_layout=True, figsize=(1, 8))\n","\n","number = 10\n","\n","infos=load_infos()\n","\n","party_colors = {}\n","for party in infos:\n","    party_colors[party] = infos[party]['color']\n","\n","\n","sns.countplot(ax=axs[0, 0], x='Person', data=direct_citations,\n","              order=direct_citations['Person'].value_counts().iloc[:number].index,\n","              palette=sns.color_palette(\"tab10\"))\n","sns.countplot(ax=axs[0, 1], x='Person', data= indirect_citations[-(indirect_citations['Person'] == 'Presidente')],\n","              order=indirect_citations['Person'].value_counts().iloc[:number].index,\n","              palette=sns.color_palette(\"tab10\"))\n","\n","sns.countplot(ax=axs[1, 0], x='Party',\n","            data= direct_citations, palette=party_colors,\n","            order=direct_citations['Party'].value_counts().index)\n","sns.countplot(ax=axs[1, 1], x='Party', \n","            data= indirect_citations, palette=party_colors,\n","            order=indirect_citations['Party'].value_counts().index)\n","\n","axs[0, 1].set_title('Top 10 Menções Indiretas por Parlamentar', fontweight='bold', fontsize=14)\n","axs[0, 0].set_title('Top 10 Menções Diretas por Parlamentar', fontweight='bold', fontsize=14)\n","axs[1, 0].set_title('Menções Diretas por Partido', fontweight='bold', fontsize=14)\n","axs[1, 1].set_title('Menções Indiretas por Partido', fontweight='bold', fontsize=14)\n","\n","axs[0, 0].set_xlabel('Parlamentar', fontstyle='italic', fontsize=10)\n","axs[0, 1].set_xlabel('Parlamentar', fontstyle='italic', fontsize=10)\n","axs[1, 0].set_xlabel('Partido', fontstyle='italic', fontsize=10)\n","axs[1, 1].set_xlabel('Partido', fontstyle='italic', fontsize=10)\n","axs[0, 0].set_ylabel('Contagem', fontstyle='italic', fontsize=10)\n","axs[0, 1].set_ylabel('Contagem', fontstyle='italic', fontsize=10)\n","axs[1, 0].set_ylabel('Contagem', fontstyle='italic', fontsize=10)\n","axs[1, 1].set_ylabel('Contagem', fontstyle='italic', fontsize=10)\n","\n","axs[0, 0].tick_params(axis='both', rotation=45, labelsize=8)\n","axs[0, 1].tick_params(axis='both', rotation=45, labelsize=8)\n","axs[1, 0].tick_params(axis='both', labelsize=8)\n","axs[1, 1].tick_params(axis='both', labelsize=8)\n","\n","plt.savefig(\"paper_graphs.png\", format='png', dpi=500)\n","plt.show()\n","'''"],"execution_count":16,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 2 Axes>"]},"metadata":{}},{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'\\nimport matplotlib.pyplot as plt\\nsns.set_context(\"paper\")\\nplt.style.available\\nplt.style.use(\\'seaborn\\')\\n\\nsns.set_palette(sns.color_palette(\"tab10\"))\\n\\nplt.rc(\\'font\\', family=\\'serif\\')\\n\\nsns.set(font_scale=1.5, rc={\\'text.usetex\\' : False})\\nplt.rc(\\'font\\', family=\\'serif\\')\\n#plt.style.use(\\'tex\\')\\n\\nfig, axs = plt.subplots(2, 2, constrained_layout=True, figsize=(1, 8))\\n\\nnumber = 10\\n\\ninfos=load_infos()\\n\\nparty_colors = {}\\nfor party in infos:\\n    party_colors[party] = infos[party][\\'color\\']\\n\\n\\nsns.countplot(ax=axs[0, 0], x=\\'Person\\', data=direct_citations,\\n              order=direct_citations[\\'Person\\'].value_counts().iloc[:number].index,\\n              palette=sns.color_palette(\"tab10\"))\\nsns.countplot(ax=axs[0, 1], x=\\'Person\\', data= indirect_citations[-(indirect_citations[\\'Person\\'] == \\'Presidente\\')],\\n              order=indirect_citations[\\'Person\\'].value_counts().iloc[:number].index,\\n              palette=sns.color_palette(\"tab10\"))\\n\\nsns.countplot(ax=axs[1, 0], x=\\'Party\\',\\n            data= direct_citations, palette=party_colors,\\n            order=direct_citations[\\'Party\\'].value_counts().index)\\nsns.countplot(ax=axs[1, 1], x=\\'Party\\', \\n            data= indirect_citations, palette=party_colors,\\n            order=indirect_citations[\\'Party\\'].value_counts().index)\\n\\naxs[0, 1].set_title(\\'Top 10 Menções Indiretas por Parlamentar\\', fontweight=\\'bold\\', fontsize=14)\\naxs[0, 0].set_title(\\'Top 10 Menções Diretas por Parlamentar\\', fontweight=\\'bold\\', fontsize=14)\\naxs[1, 0].set_title(\\'Menções Diretas por Partido\\', fontweight=\\'bold\\', fontsize=14)\\naxs[1, 1].set_title(\\'Menções Indiretas por Partido\\', fontweight=\\'bold\\', fontsize=14)\\n\\naxs[0, 0].set_xlabel(\\'Parlamentar\\', fontstyle=\\'italic\\', fontsize=10)\\naxs[0, 1].set_xlabel(\\'Parlamentar\\', fontstyle=\\'italic\\', fontsize=10)\\naxs[1, 0].set_xlabel(\\'Partido\\', fontstyle=\\'italic\\', fontsize=10)\\naxs[1, 1].set_xlabel(\\'Partido\\', fontstyle=\\'italic\\', fontsize=10)\\naxs[0, 0].set_ylabel(\\'Contagem\\', fontstyle=\\'italic\\', fontsize=10)\\naxs[0, 1].set_ylabel(\\'Contagem\\', fontstyle=\\'italic\\', fontsize=10)\\naxs[1, 0].set_ylabel(\\'Contagem\\', fontstyle=\\'italic\\', fontsize=10)\\naxs[1, 1].set_ylabel(\\'Contagem\\', fontstyle=\\'italic\\', fontsize=10)\\n\\naxs[0, 0].tick_params(axis=\\'both\\', rotation=45, labelsize=8)\\naxs[0, 1].tick_params(axis=\\'both\\', rotation=45, labelsize=8)\\naxs[1, 0].tick_params(axis=\\'both\\', labelsize=8)\\naxs[1, 1].tick_params(axis=\\'both\\', labelsize=8)\\n\\nplt.savefig(\"paper_graphs.png\", format=\\'png\\', dpi=500)\\nplt.show()\\n'"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"HTjvK6J6Jomj"},"source":["# Gif"]},{"cell_type":"code","metadata":{"id":"GyzVo1Be_lB5","executionInfo":{"status":"aborted","timestamp":1632286724098,"user_tz":180,"elapsed":11,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjeqtCv_2zHtu64b7C2Lmv5UyFqai7wm3a8N8GE8w=s64","userId":"00423683093258305256"}}},"source":["#@title #**Gráfico político-econômico animado das citações diretas** {run: \"auto\", display-mode: \"form\" }\n","\n","def create_dataframes(citations, infos=load_infos()):\n","    df_dict = {}\n","    dates = citations['Date'].unique().tolist()\n","    grouped = citations.groupby(citations['Date'])\n","    \n","    for i in range(len(dates)):\n","\n","        group = grouped.get_group(citations['Date'].unique().tolist()[i])\n","\n","        df_dict[str(dates[i])] = {            \n","            'Party' : [],\n","            'Count' : [],\n","            'Color' : [],\n","            'Orientation' : [],\n","            'Image' : [],\n","            'X_coordinate' : [],\n","            'Y_coordinate' : [],\n","        }\n","        \n","        for party in infos:\n","            \n","            df_dict[str(dates[i])]['Party'].append(party)\n","            df_dict[str(dates[i])]['Count'].append(len(group.loc[group['Party'] == party]))\n","            df_dict[str(dates[i])]['Color'].append(infos[party]['color'])\n","            df_dict[str(dates[i])]['Orientation'].append(infos[party]['orientation'])\n","            df_dict[str(dates[i])]['Image'].append(infos[party]['url_image'])\n","            df_dict[str(dates[i])]['X_coordinate'].append(infos[party]['coordinates'][0])\n","            df_dict[str(dates[i])]['Y_coordinate'].append(infos[party]['coordinates'][1])\n","\n","        df_dict[str(dates[i])] = pd.DataFrame(df_dict[str(dates[i])])\n","\n","    dates = [str(date) for date in dates]\n","    dates.sort()\n","\n","    return df_dict, dates\n","\n","def create_graph(df, date, normalization=(0, 405)):\n","    colors = {}\n","\n","    for i in range(len(df)):\n","        colors[df['Party'][i]] = df['Color'][i]\n","\n","    sns.set_style('darkgrid')\n","    sns.set_context('paper')\n","    sns.set(font_scale=1.1)\n","\n","    plt.figure(figsize=(14, 14))\n","    ax = sns.scatterplot(x='X_coordinate', y='Y_coordinate', data=df,\n","                         palette=colors, hue='Party', size='Count', \n","                         alpha=0.5, sizes=(100, 10000),\n","                         size_norm=(normalization[0], normalization[1]))\n","\n","    ax.set_title('Eixo político-econômico: Acumulado até ' + str(date), y=1.04, fontsize='x-large')\n","\n","    ax.set(xlim=(-5.5, 5.5), ylim=(-5.5, 5.5))\n","    \n","    ax.axhline(y=0, linewidth=0.5, color='black')\n","    ax.axvline(x=0, linewidth=0.5, color='black')\n","\n","    for i in range(len(df)):\n","        ax.annotate(df['Party'][i],\n","                    xy=(df['X_coordinate'][i], df['Y_coordinate'][i]),\n","                    xycoords='data',\n","                    xytext=(df['X_coordinate'][i]-0.15, df['Y_coordinate'][i]+0.15),\n","                    )\n","        ax.annotate(df['Count'][i],\n","            xy=(df['X_coordinate'][i], df['Y_coordinate'][i]),\n","            xycoords='data',\n","            xytext=(df['X_coordinate'][i]+0.1, df['Y_coordinate'][i]-0.1),\n","            )\n","    \n","    ax.legend(fancybox=True, shadow=True)\n","\n","    plt.xticks(np.arange(-5, 6, 1), 5*['']+['Conservador']+5*[''], fontsize='large')\n","    plt.yticks(np.arange(-5, 6, 1), 5*['']+['Esquerda']+5*[''], fontsize='large')\n","\n","    labelx = ax.set_xlabel('Liberal', fontsize='large')\n","    ax.xaxis.set_label_coords(0.5, 1.03)\n","\n","    labely = ax.set_ylabel('Direita', fontsize='large', rotation='horizontal')\n","    ax.yaxis.set_label_coords(1.04, 0.489)\n","    \n","    ax.get_legend().remove()\n","    \n","    plt.close()\n","\n","    return ax.get_figure()\n","\n","def acumulative(citations_dict, citations_dates):\n","\n","    acumulative_dict = copy.deepcopy(citations_dict)\n","\n","    for i in range(1, len(citations_dates)):\n","        acumulative_dict[citations_dates[i]]['Count'] += acumulative_dict[citations_dates[i-1]]['Count']\n","    \n","    return acumulative_dict\n","\n","def get_normalization(citations_dict, citations_dates):\n","    return (citations_dict[citations_dates[0]]['Count'].min(), citations_dict[citations_dates[-1]]['Count'].max())\n","\n","def clean_acumulative(acumulative_dict, acumulative_dates):\n","\n","    clean_dict = copy.deepcopy(acumulative_dict)\n","\n","    last_df = clean_dict[acumulative_dates[-1]]\n","    null_values = []\n","\n","    for i in range(len(last_df['Party'])):\n","        if last_df['Count'][i] == 0:\n","            null_values.append(last_df['Party'][i])\n","\n","    for date in acumulative_dates:\n","        for party in null_values:\n","            clean_dict[date] = clean_dict[date][clean_dict[date]['Party'] != party]\n","        clean_dict[date].reset_index(drop=True, inplace=True)    \n","    return clean_dict\n","\n","def create_gif(citations_dict, citations_dates, folder_name='citations', gif_name='citations', duration=1):\n","    acumulative_dict = acumulative(citations_dict, citations_dates)\n","    clean_dict = clean_acumulative(acumulative_dict, citations_dates)\n","    norm = get_normalization(clean_dict, citations_dates)\n","\n","    graph_images = []\n","    png_images = []\n","    \n","    origin_path = os.getcwd()\n","    os.makedirs(os.path.join(origin_path, folder_name), exist_ok=True)\n","    os.chdir(os.path.join(origin_path, folder_name))\n","\n","    for i in range(len(citations_dates)):\n","        graph_images.append(create_graph(clean_dict[citations_dates[i]], citations_dates[i], norm))\n","        graph_images[i].savefig(citations_dates[i] + '.png')\n","        png_images.append(imageio.imread(citations_dates[i] + '.png'))\n","\n","    imageio.mimsave(gif_name+'.gif', png_images, format='GIF', duration=1)\n","\n","    display(Image(open(os.path.join(origin_path, folder_name, gif_name+'.gif'),'rb').read()))\n","\n","    os.chdir(origin_path)\n","\n","indirect_dict, indirect_dates = create_dataframes(indirect_citations)\n","create_gif(indirect_dict, indirect_dates, 'indirect-citations', 'indirect-citations')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UniKJoeg9TeY","executionInfo":{"status":"aborted","timestamp":1632286724099,"user_tz":180,"elapsed":12,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjeqtCv_2zHtu64b7C2Lmv5UyFqai7wm3a8N8GE8w=s64","userId":"00423683093258305256"}}},"source":["#@title #**Gráfico político-econômico animado das citações diretas** {run: \"auto\", display-mode: \"form\" }\n","\n","direct_dict, direct_dates = create_dataframes(direct_citations)\n","create_gif(direct_dict, direct_dates, 'direct-citations', 'direct-citations')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"587BZTD-mWm4","executionInfo":{"status":"aborted","timestamp":1632286724100,"user_tz":180,"elapsed":13,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjeqtCv_2zHtu64b7C2Lmv5UyFqai7wm3a8N8GE8w=s64","userId":"00423683093258305256"}}},"source":["def parties_statistics_pie(direct_citations, indirect_citations, infos=load_infos()):\n","    \n","    party_colors = {}\n","    for party in infos:\n","        party_colors[party] = infos[party]['color']\n","    \n","    fig, axs = plt.subplots(1, 2, sharey=True, \n","                            constrained_layout=True, \n","                            figsize=(8,6))\n","    #fig.suptitle('Party Participation Statistics Graph', fontsize='large', fontweight='bold')\n","    axs[0].set_title('Direct Participation of Parties', fontweight='bold', fontsize=16)\n","    axs[1].set_title('Indirect Participation of Parties', fontweight='bold', fontsize=16)\n","\n","    direct_parties = {\n","        'Parties' : [],\n","        '# Citations' : [],\n","    }\n","    indirect_parties = {\n","        'Parties' : [],\n","        '# Citations' : [],\n","    }\n","\n","    for party in direct_citations['Party'].unique().tolist():\n","        if str(party) != str(np.nan):\n","            direct_parties['Parties'].append(party)\n","            direct_parties['# Citations'].append(len(direct_citations.loc[direct_citations['Party'] == party]))\n","\n","    for party in indirect_citations['Party'].unique().tolist():\n","        if str(party) != str(np.nan):\n","            indirect_parties['Parties'].append(party)\n","            indirect_parties['# Citations'].append(len(indirect_citations.loc[indirect_citations['Party'] == party]))\n","\n","\n","    direct_parties = pd.DataFrame.from_dict(direct_parties).sort_values(by=['# Citations'], ascending=False)\n","    indirect_parties = pd.DataFrame.from_dict(indirect_parties).sort_values(by=['# Citations'], ascending=False)\n","\n","    labels = direct_parties['Parties'].unique()\n","\n","    axs[0].pie(x='# Citations', labels=labels,\n","               shadow=True, startangle=0, \n","               explode=[0.1]+[0]*(len(direct_parties)-1), \n","               data=direct_parties,\n","               colors=[party_colors[key] for key in labels])\n","\n","    labels = indirect_parties['Parties'].unique()\n","\n","    axs[1].pie(x='# Citations', labels=labels,\n","               shadow=True, startangle=0, \n","               explode=[0.1]+[0]*(len(indirect_parties)-1), \n","               data=indirect_parties,\n","               colors=[party_colors[key] for key in labels])\n","\n","    plt.show()\n","\n","parties_statistics_pie(direct_citations, indirect_citations)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"B_grVHn8JvoS"},"source":["# Paper"]},{"cell_type":"code","metadata":{"id":"JDjosDOW6CyU","executionInfo":{"status":"aborted","timestamp":1632286724101,"user_tz":180,"elapsed":14,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjeqtCv_2zHtu64b7C2Lmv5UyFqai7wm3a8N8GE8w=s64","userId":"00423683093258305256"}}},"source":["pip install latex"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tlCNMtV18cEl","executionInfo":{"status":"aborted","timestamp":1632286724407,"user_tz":180,"elapsed":319,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjeqtCv_2zHtu64b7C2Lmv5UyFqai7wm3a8N8GE8w=s64","userId":"00423683093258305256"}}},"source":["pip install tex"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ho_k3pfG4xsW","executionInfo":{"status":"aborted","timestamp":1632286724409,"user_tz":180,"elapsed":321,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjeqtCv_2zHtu64b7C2Lmv5UyFqai7wm3a8N8GE8w=s64","userId":"00423683093258305256"}}},"source":["import matplotlib.pyplot as plt\n","sns.set_context(\"paper\")\n","plt.style.available\n","plt.style.use('seaborn')\n","\n","sns.set_palette(sns.color_palette(\"tab10\"))\n","\n","plt.rc('font', family='serif')\n","\n","sns.set(font_scale=1.5, rc={'text.usetex' : False})\n","plt.rc('font', family='serif')\n","#plt.style.use('tex')\n","\n","\n","fig, axs = plt.subplots(1, 4, constrained_layout=True, figsize=(32, 8))\n","\n","number = 10\n","\n","infos=load_infos()\n","\n","party_colors = {}\n","for party in infos:\n","    party_colors[party] = infos[party]['color']\n","\n","\n","sns.countplot(ax=axs[0], x='Person', data=direct_citations,\n","              order=direct_citations['Person'].value_counts().iloc[:number].index,\n","              palette=sns.color_palette(\"tab10\"))\n","sns.countplot(ax=axs[1], x='Person', data= indirect_citations[-(indirect_citations['Person'] == 'Presidente')],\n","              order=indirect_citations['Person'].value_counts().iloc[:number].index,\n","              palette=sns.color_palette(\"tab10\"))\n","\n","sns.countplot(ax=axs[2], x='Party',\n","            data= direct_citations, palette=party_colors,\n","            order=direct_citations['Party'].value_counts().index)\n","sns.countplot(ax=axs[3], x='Party', \n","            data= indirect_citations, palette=party_colors,\n","            order=indirect_citations['Party'].value_counts().index)\n","\n","axs[0].set_title('Top 10 Direct Congressmembers participation', fontweight='bold', fontsize=16)\n","axs[1].set_title('Top 10 Indirect Congressmembers participation', fontweight='bold', fontsize=16)\n","axs[2].set_title('Direct Citations by Parties', fontweight='bold', fontsize=16)\n","axs[3].set_title('Indirect Citations by Parties', fontweight='bold', fontsize=16)\n","\n","axs[0].set_xlabel('Congressperson', fontstyle='italic', fontsize=12)\n","axs[1].set_xlabel('Congressperson', fontstyle='italic', fontsize=12)\n","axs[2].set_xlabel('Parties', fontstyle='italic', fontsize=12)\n","axs[3].set_xlabel('Parties', fontstyle='italic', fontsize=12)\n","axs[0].set_ylabel('Count', fontstyle='italic', fontsize=12)\n","axs[1].set_ylabel('Count', fontstyle='italic', fontsize=12)\n","axs[2].set_ylabel('Count', fontstyle='italic', fontsize=12)\n","axs[3].set_ylabel('Count', fontstyle='italic', fontsize=12)\n","\n","axs[0].tick_params(axis='both', rotation=45, labelsize=10)\n","axs[1].tick_params(axis='both', rotation=45, labelsize=10)\n","axs[2].tick_params(axis='both', labelsize=10)\n","axs[3].tick_params(axis='both', labelsize=10)\n","\n","plt.savefig(\"my_plot.pdf\", format='pdf', dpi=500)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dbDeT6ZX_BS_","executionInfo":{"status":"aborted","timestamp":1632286724411,"user_tz":180,"elapsed":323,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjeqtCv_2zHtu64b7C2Lmv5UyFqai7wm3a8N8GE8w=s64","userId":"00423683093258305256"}}},"source":["import matplotlib.pyplot as plt\n","sns.set_context(\"paper\")\n","plt.style.available\n","plt.style.use('seaborn')\n","\n","sns.set_palette(sns.color_palette(\"tab10\"))\n","\n","plt.rc('font', family='serif')\n","\n","sns.set(font_scale=1.5, rc={'text.usetex' : False})\n","plt.rc('font', family='serif')\n","#plt.style.use('tex')\n","\n","fig, axs = plt.subplots(2, 2, constrained_layout=True, figsize=(12, 8))\n","\n","number = 10\n","\n","infos=load_infos()\n","\n","party_colors = {}\n","for party in infos:\n","    party_colors[party] = infos[party]['color']\n","\n","\n","sns.countplot(ax=axs[0, 0], x='Person', data=direct_citations,\n","              order=direct_citations['Person'].value_counts().iloc[:number].index,\n","              palette=sns.color_palette(\"tab10\"))\n","sns.countplot(ax=axs[0, 1], x='Person', data= indirect_citations[-(indirect_citations['Person'] == 'Presidente')],\n","              order=indirect_citations['Person'].value_counts().iloc[:number].index,\n","              palette=sns.color_palette(\"tab10\"))\n","\n","sns.countplot(ax=axs[1, 0], x='Party',\n","            data= direct_citations, palette=party_colors,\n","            order=direct_citations['Party'].value_counts().index)\n","sns.countplot(ax=axs[1, 1], x='Party', \n","            data= indirect_citations, palette=party_colors,\n","            order=indirect_citations['Party'].value_counts().index)\n","\n","axs[0, 1].set_title('Top 10 Menções Indiretas por Parlamentar', fontweight='bold', fontsize=14)\n","axs[0, 0].set_title('Top 10 Menções Diretas por Parlamentar', fontweight='bold', fontsize=14)\n","axs[1, 0].set_title('Menções Diretas por Partido', fontweight='bold', fontsize=14)\n","axs[1, 1].set_title('Menções Indiretas por Partido', fontweight='bold', fontsize=14)\n","\n","axs[0, 0].set_xlabel('Parlamentar', fontstyle='italic', fontsize=10)\n","axs[0, 1].set_xlabel('Parlamentar', fontstyle='italic', fontsize=10)\n","axs[1, 0].set_xlabel('Partido', fontstyle='italic', fontsize=10)\n","axs[1, 1].set_xlabel('Partido', fontstyle='italic', fontsize=10)\n","axs[0, 0].set_ylabel('Contagem', fontstyle='italic', fontsize=10)\n","axs[0, 1].set_ylabel('Contagem', fontstyle='italic', fontsize=10)\n","axs[1, 0].set_ylabel('Contagem', fontstyle='italic', fontsize=10)\n","axs[1, 1].set_ylabel('Contagem', fontstyle='italic', fontsize=10)\n","\n","axs[0, 0].tick_params(axis='both', rotation=45, labelsize=8)\n","axs[0, 1].tick_params(axis='both', rotation=45, labelsize=8)\n","axs[1, 0].tick_params(axis='both', labelsize=8)\n","axs[1, 1].tick_params(axis='both', labelsize=8)\n","\n","plt.savefig(\"paper_graphs.png\", format='png', dpi=500)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bPM9wRQkJZyn","executionInfo":{"status":"aborted","timestamp":1632286724412,"user_tz":180,"elapsed":324,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjeqtCv_2zHtu64b7C2Lmv5UyFqai7wm3a8N8GE8w=s64","userId":"00423683093258305256"}}},"source":[""],"execution_count":null,"outputs":[]}]}