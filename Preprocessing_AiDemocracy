{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Preprocessing_AiDemocracy","provenance":[],"collapsed_sections":[],"toc_visible":true,"authorship_tag":"ABX9TyOfjYf+df0kOcI1EOuns5Fq"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"5DaeDdyJrnq8"},"source":["# **Pré-processamento AI Democracy**\n","\n","---\n","\n","O objetivo desse *notebook* é criar os métodos de pré-processamento de textos específicos para o AI Democracy. Desse modo é esperado reduzir o tamanho do vocabulário e simplificar formas lexicais, de modo que seja mais fácil para nossos modelos de *machine learning* abstrair *features* e informações relevantes das Atas do Diário da Assembléia da República (DAR) Portuguesa."]},{"cell_type":"markdown","metadata":{"id":"WiXrvZJ-yV_O"},"source":["## Carregando Bibliotecas:\n","\n","Vamos então fazer o *download* do `spaCy`, uma biblioteca com funções de PLN e baixar também o conjunto de dados `pt_core_news_lg-3.0.0` também do `spaCy`que irá nos ajudar futuramente.\n","\n","Fora isso importaremos também as bibliotecas tradicionais."]},{"cell_type":"code","metadata":{"id":"7dovMPg53gqC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623636281020,"user_tz":180,"elapsed":20776,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GipjzEo8ZMU7T5CScvwquuNadVZOv9a7EefCtELMQ=s64","userId":"00423683093258305256"}},"outputId":"0e74b463-83be-430d-b7a6-4edd3380d0f0"},"source":["!pip install -U spacy"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting spacy\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/1b/d8/0361bbaf7a1ff56b44dca04dace54c82d63dad7475b7d25ea1baefafafb2/spacy-3.0.6-cp37-cp37m-manylinux2014_x86_64.whl (12.8MB)\n","\u001b[K     |████████████████████████████████| 12.8MB 274kB/s \n","\u001b[?25hCollecting srsly<3.0.0,>=2.4.1\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/c3/84/dfdfc9f6f04f6b88207d96d9520b911e5fec0c67ff47a0dea31ab5429a1e/srsly-2.4.1-cp37-cp37m-manylinux2014_x86_64.whl (456kB)\n","\u001b[K     |████████████████████████████████| 460kB 45.8MB/s \n","\u001b[?25hCollecting pydantic<1.8.0,>=1.7.1\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ca/fa/d43f31874e1f2a9633e4c025be310f2ce7a8350017579e9e837a62630a7e/pydantic-1.7.4-cp37-cp37m-manylinux2014_x86_64.whl (9.1MB)\n","\u001b[K     |████████████████████████████████| 9.1MB 5.4MB/s \n","\u001b[?25hCollecting catalogue<2.1.0,>=2.0.3\n","  Downloading https://files.pythonhosted.org/packages/9c/10/dbc1203a4b1367c7b02fddf08cb2981d9aa3e688d398f587cea0ab9e3bec/catalogue-2.0.4-py3-none-any.whl\n","Requirement already satisfied, skipping upgrade: numpy>=1.15.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (1.19.5)\n","Requirement already satisfied, skipping upgrade: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (20.9)\n","Requirement already satisfied, skipping upgrade: typing-extensions<4.0.0.0,>=3.7.4; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from spacy) (3.7.4.3)\n","Collecting spacy-legacy<3.1.0,>=3.0.4\n","  Downloading https://files.pythonhosted.org/packages/8d/67/d4002a18e26bf29b17ab563ddb55232b445ab6a02f97bf17d1345ff34d3f/spacy_legacy-3.0.5-py2.py3-none-any.whl\n","Collecting pathy>=0.3.5\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/13/87/5991d87be8ed60beb172b4062dbafef18b32fa559635a8e2b633c2974f85/pathy-0.5.2-py3-none-any.whl (42kB)\n","\u001b[K     |████████████████████████████████| 51kB 6.3MB/s \n","\u001b[?25hRequirement already satisfied, skipping upgrade: jinja2 in /usr/local/lib/python3.7/dist-packages (from spacy) (2.11.3)\n","Requirement already satisfied, skipping upgrade: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (1.0.5)\n","Requirement already satisfied, skipping upgrade: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy) (2.0.5)\n","Requirement already satisfied, skipping upgrade: wasabi<1.1.0,>=0.8.1 in /usr/local/lib/python3.7/dist-packages (from spacy) (0.8.2)\n","Requirement already satisfied, skipping upgrade: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (4.41.1)\n","Requirement already satisfied, skipping upgrade: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy) (57.0.0)\n","Requirement already satisfied, skipping upgrade: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy) (3.0.5)\n","Requirement already satisfied, skipping upgrade: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (2.23.0)\n","Requirement already satisfied, skipping upgrade: blis<0.8.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (0.4.1)\n","Collecting thinc<8.1.0,>=8.0.3\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/55/e5/6820eccc01d6d8b1d87c3bd021321516af572dcd551e41712913f880f58f/thinc-8.0.4-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (618kB)\n","\u001b[K     |████████████████████████████████| 624kB 54.2MB/s \n","\u001b[?25hCollecting typer<0.4.0,>=0.3.0\n","  Downloading https://files.pythonhosted.org/packages/90/34/d138832f6945432c638f32137e6c79a3b682f06a63c488dcfaca6b166c64/typer-0.3.2-py3-none-any.whl\n","Requirement already satisfied, skipping upgrade: zipp>=0.5; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from catalogue<2.1.0,>=2.0.3->spacy) (3.4.1)\n","Requirement already satisfied, skipping upgrade: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->spacy) (2.4.7)\n","Collecting smart-open<4.0.0,>=2.2.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/11/9a/ba2d5f67f25e8d5bbf2fcec7a99b1e38428e83cb715f64dd179ca43a11bb/smart_open-3.0.0.tar.gz (113kB)\n","\u001b[K     |████████████████████████████████| 122kB 41.2MB/s \n","\u001b[?25hRequirement already satisfied, skipping upgrade: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2->spacy) (2.0.1)\n","Requirement already satisfied, skipping upgrade: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2.10)\n","Requirement already satisfied, skipping upgrade: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2020.12.5)\n","Requirement already satisfied, skipping upgrade: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (1.24.3)\n","Requirement already satisfied, skipping upgrade: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (3.0.4)\n","Requirement already satisfied, skipping upgrade: click<7.2.0,>=7.1.1 in /usr/local/lib/python3.7/dist-packages (from typer<0.4.0,>=0.3.0->spacy) (7.1.2)\n","Building wheels for collected packages: smart-open\n","  Building wheel for smart-open (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for smart-open: filename=smart_open-3.0.0-cp37-none-any.whl size=107107 sha256=97c90c2c61ab7983a9e322a9e573258be8dfe03afd1729dcbf086fb931273b33\n","  Stored in directory: /root/.cache/pip/wheels/18/88/7c/f06dabd5e9cabe02d2269167bcacbbf9b47d0c0ff7d6ebcb78\n","Successfully built smart-open\n","Installing collected packages: catalogue, srsly, pydantic, spacy-legacy, typer, smart-open, pathy, thinc, spacy\n","  Found existing installation: catalogue 1.0.0\n","    Uninstalling catalogue-1.0.0:\n","      Successfully uninstalled catalogue-1.0.0\n","  Found existing installation: srsly 1.0.5\n","    Uninstalling srsly-1.0.5:\n","      Successfully uninstalled srsly-1.0.5\n","  Found existing installation: smart-open 5.0.0\n","    Uninstalling smart-open-5.0.0:\n","      Successfully uninstalled smart-open-5.0.0\n","  Found existing installation: thinc 7.4.0\n","    Uninstalling thinc-7.4.0:\n","      Successfully uninstalled thinc-7.4.0\n","  Found existing installation: spacy 2.2.4\n","    Uninstalling spacy-2.2.4:\n","      Successfully uninstalled spacy-2.2.4\n","Successfully installed catalogue-2.0.4 pathy-0.5.2 pydantic-1.7.4 smart-open-3.0.0 spacy-3.0.6 spacy-legacy-3.0.5 srsly-2.4.1 thinc-8.0.4 typer-0.3.2\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ikjVe18StZob","executionInfo":{"status":"ok","timestamp":1623636287944,"user_tz":180,"elapsed":6931,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GipjzEo8ZMU7T5CScvwquuNadVZOv9a7EefCtELMQ=s64","userId":"00423683093258305256"}},"outputId":"65293fac-e39d-447f-8cb9-71f78e42f8a0"},"source":["import pandas as pd\n","import numpy as np\n","import re\n","import nltk\n","import collections\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from scipy.optimize import curve_fit\n","nltk.download('stopwords')\n","from bs4 import BeautifulSoup\n","import os\n","import pickle\n","import spacy"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mIceVbPq3Pf1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623636344681,"user_tz":180,"elapsed":56743,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GipjzEo8ZMU7T5CScvwquuNadVZOv9a7EefCtELMQ=s64","userId":"00423683093258305256"}},"outputId":"a2076829-78e6-41ba-dab0-df8931b2d01e"},"source":["!python -m spacy download pt_core_news_lg"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2021-06-14 02:04:48.899855: I tensorflow/stream_executor/platform/default/dso_loader.cc:53] Successfully opened dynamic library libcudart.so.11.0\n","Collecting pt-core-news-lg==3.0.0\n","\u001b[?25l  Downloading https://github.com/explosion/spacy-models/releases/download/pt_core_news_lg-3.0.0/pt_core_news_lg-3.0.0-py3-none-any.whl (578.1MB)\n","\u001b[K     |████████████████████████████████| 578.1MB 20kB/s \n","\u001b[?25hRequirement already satisfied: spacy<3.1.0,>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from pt-core-news-lg==3.0.0) (3.0.6)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (57.0.0)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (3.0.5)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (20.9)\n","Requirement already satisfied: pydantic<1.8.0,>=1.7.1 in /usr/local/lib/python3.7/dist-packages (from spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (1.7.4)\n","Requirement already satisfied: wasabi<1.1.0,>=0.8.1 in /usr/local/lib/python3.7/dist-packages (from spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (0.8.2)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.7/dist-packages (from spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (2.11.3)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.7/dist-packages (from spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (2.23.0)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (1.0.5)\n","Requirement already satisfied: blis<0.8.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (0.4.1)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.3 in /usr/local/lib/python3.7/dist-packages (from spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (2.0.4)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.4 in /usr/local/lib/python3.7/dist-packages (from spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (3.0.5)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.7/dist-packages (from spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (4.41.1)\n","Requirement already satisfied: typing-extensions<4.0.0.0,>=3.7.4; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (3.7.4.3)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.1 in /usr/local/lib/python3.7/dist-packages (from spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (2.4.1)\n","Requirement already satisfied: thinc<8.1.0,>=8.0.3 in /usr/local/lib/python3.7/dist-packages (from spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (8.0.4)\n","Requirement already satisfied: pathy>=0.3.5 in /usr/local/lib/python3.7/dist-packages (from spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (0.5.2)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (2.0.5)\n","Requirement already satisfied: typer<0.4.0,>=0.3.0 in /usr/local/lib/python3.7/dist-packages (from spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (0.3.2)\n","Requirement already satisfied: numpy>=1.15.0 in /usr/local/lib/python3.7/dist-packages (from spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (1.19.5)\n","Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (2.4.7)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2->spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (2.0.1)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (2020.12.5)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (2.10)\n","Requirement already satisfied: zipp>=0.5; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from catalogue<2.1.0,>=2.0.3->spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (3.4.1)\n","Requirement already satisfied: smart-open<4.0.0,>=2.2.0 in /usr/local/lib/python3.7/dist-packages (from pathy>=0.3.5->spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (3.0.0)\n","Requirement already satisfied: click<7.2.0,>=7.1.1 in /usr/local/lib/python3.7/dist-packages (from typer<0.4.0,>=0.3.0->spacy<3.1.0,>=3.0.0->pt-core-news-lg==3.0.0) (7.1.2)\n","Installing collected packages: pt-core-news-lg\n","Successfully installed pt-core-news-lg-3.0.0\n","\u001b[38;5;2m✔ Download and installation successful\u001b[0m\n","You can now load the package via spacy.load('pt_core_news_lg')\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NLqScqqwyYcv"},"source":["## Carregando Dados:\n","\n","Carregando o *dataset* das atas."]},{"cell_type":"code","metadata":{"id":"tbpc9LhCybG2"},"source":["#minutes = pd.read_csv('atas_com_subject.csv')\n","#minutes.drop('Unnamed: 0', axis=1, inplace=True)\n","minutes = pd.read_excel('output (3).xlsx')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dH5bs4bTPbJb","executionInfo":{"status":"ok","timestamp":1623636347679,"user_tz":180,"elapsed":21,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GipjzEo8ZMU7T5CScvwquuNadVZOv9a7EefCtELMQ=s64","userId":"00423683093258305256"}},"outputId":"920129ec-1c56-488b-d1b6-6b7797c4f785"},"source":["minutes['Y_true'].unique()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([nan,  1.,  0.])"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"fiEjiY6-ynTB"},"source":["# **Limpeza \"Bruta\"**\n","\n","---\n","\n","Nesse primeiro módulo temos 3 funções cada uma tem um propósito e, combinadas, vão nos ajudar a limpar os dados na base da \"força bruta\". Dentro das Atas existem alguns erros de digitação que podem atrapalhar, criando variações de vocabulário inexistentes e gerando *tokens* que não são relevantes para o nosso trabalho.\n","<br><br>\n","`find_typos`: Serve para identificar *typos*, que são prováveis erros de digitação que a redação das Atas do DAR cometeu. Para conseguirmos acharmos quais são os prováveis *typos* usaremos a distância de edição de Levenshtein, essa distância retorna o número mínimo de operações necessárias para transformar uma `string` em outra. (Observação:  São consideradas operações a inserção, deleção ou substituição de um caractere.)\n","<br><br>\n","`clean`: Depois que os possíveis *typos* foram analisados manualmente e foi conferido quais realmente são os erros de digitação existentes, essa função cuida da parte de corrigir nosso *dataset* e substituir esses erros de digitação pela palavra correta.\n","<br><br>\n","`remove_non_politicians_party`: Essa função visa corrigir um problema na hora da coleta de dados, alguns cargos do DAR não possuem um partido explícito em suas falas, para o caso de Presidentes e Secretários, o algoritmo então erroneamente assimilava o Nome dessa pessoa ao local designado para o partido. Essa função deixa esses cargos sem esse partido."]},{"cell_type":"code","metadata":{"id":"OI3U8ht8TfXh"},"source":["minutes.replace(np.nan, 'nan', inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bNDte_8lyq00","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623636347681,"user_tz":180,"elapsed":14,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GipjzEo8ZMU7T5CScvwquuNadVZOv9a7EefCtELMQ=s64","userId":"00423683093258305256"}},"outputId":"1f5ec7e4-4796-45dd-e42a-0eb8e0f0f19a"},"source":["def find_typos(citations, threshold=3):\n","    people = pd.Series(citations['Person'].unique()).to_list()\n","    people = list(set(people))\n","\n","    tested = []\n","    k = 0\n","\n","    for person_1 in people:\n","        for person_2 in people:\n","            person_1 = str(person_1)\n","            person_2 = str(person_2)\n","            is_different = person_1 != person_2\n","            not_tested = (person_1, person_2) not in tested\n","            edit_threshold = nltk.edit_distance(person_1, person_2) <= threshold\n","            if is_different and not_tested and edit_threshold:\n","                tested.append((person_1, person_2))\n","                tested.append((person_2, person_1))\n","                k+=1\n","                if k < 10:\n","                    print(' {}) '.format(k), person_1, '.'*(35 - len(person_1)), person_2)\n","                else:\n","                    print( '{}) '.format(k), person_1, '.'*(35 - len(person_1)), person_2)\n","\n","def remove_non_politicians_party(citations):\n","    not_politicians = ['Presidente', 'Secretária', 'Secretário', 'Ministra', 'Ministro']\n","    for not_politician in not_politicians:\n","        citations['Party'].loc[citations['Person'].str.contains(str(not_politician))] = np.nan\n","    return citations\n","\n","def clean(citations):\n","    #Corrigir falhas incoerências\n","    citations.replace(to_replace='Partido Socialista', value='PS', inplace=True)\n","    citations.replace(to_replace='SD', value=np.nan, inplace=True)\n","    citations.replace(to_replace='N insc.', value=np.nan, inplace=True)\n","\n","    #Arrumando nomes que não tinham o devido espaçamento\n","    regex = re.compile(\"[a-zá-ú][A-Z]\")\n","    for i in range(3):\n","        for person in citations['Person']:\n","            person = str(person)\n","            match = re.search(regex, person)\n","            if match:\n","                citations['Person'].replace(to_replace=person,\n","                                            value=person[:match.start()+1] + \" \" + person[match.end()-1:],\n","                                            inplace=True)\n","    for col in ['Person', 'Text']:\n","        citations[col].replace(to_replace='Rosário Gamboa', value='Rosário Gambôa', inplace=True)\n","        citations[col].replace(to_replace='António Malo de Abreu', value='António Maló de Abreu', inplace=True)\n","        citations[col].replace(to_replace='Inês de Sousa Leal', value='Inês de Sousa Real', inplace=True)\n","        citations[col].replace(to_replace='Vera Brás', value='Vera Braz', inplace=True)\n","        citations[col].replace(to_replace='Nélson Basílio Silva', value='Nelson Basílio Silva', inplace=True)\n","        citations[col].replace(to_replace='André Pinotes Baptista', value='André Pinotes Batista', inplace=True)\n","        citations[col].replace(to_replace='Claúdia Santos', value='Cláudia Santos', inplace=True)\n","        citations[col].replace(to_replace='Secretáriode Estado do Comércio, Serviços e Defesa do Consumidor',\n","                               value='Secretário de Estado do Comércio, Serviços e Defesa do Consumidor', inplace=True)\n","        citations[col].replace(to_replace='Secretáriade Estado da Habitação',\n","                               value='Secretária de Estado da Habitação', inplace=True)\n","        citations[col].replace(to_replace='Maria Antónia Almeida Santos',\n","                               value='Maria Antónia de Almeida Santos', inplace=True)\n","\n","    return citations\n","\n","if os.path.isfile('no_typos.pkl'):\n","    with open('no_typos.pkl', 'rb') as f:\n","        minutes = pickle.load(f)\n","else:\n","    print(\"=\"*30, \"SEM LIMPEZA\", \"=\"*30)\n","    #find_typos(minutes)\n","    print(\"\\n\\n\")\n","\n","    print(\"=\"*30, \"COM LIMPEZA\", \"=\"*30)\n","    minutes = clean(minutes)\n","    #find_typos(minutes)\n","    #minutes = remove_non_politicians_party(minutes)\n","    with open('no_typos.pkl', 'wb') as f:\n","        pickle.dump(minutes, f)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["============================== SEM LIMPEZA ==============================\n","\n","\n","\n","============================== COM LIMPEZA ==============================\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mh4kPHV-IKhA"},"source":["# **Tokenização**\n","\n","---\n","\n","Nessa etapa queremos separar cada uma das palavras que temos do nosso texto, isso é um processo importante e quase obrigatório na maioria dos *pipelines* de PLN. Essa tratativa irá facilitar os nossos próximos pré-processamentos. Ao final queremos ter uma lista de *tokens*, ou seja, uma lista com cada uma dessas palavras.\n","\n","`recover_citations_by_minute`: Função auxiliar que concatena todos os trechos de `minutes['Text']` para cada uma das Atas do DAR e devolve em forma de lista.\n","<br><br>\n","`recover_all_citations`: Concatena cada um dos textos da lista produzida pela função anterior, devolvendo um único bloco de texto.\n","<br><br>\n","`tokenization`: Função recebe um bloco de texto e aplica uma primeira limpeza, removendo sinais de pontuação e símbolos. Em seguida ela divide as palavras nos espaçamentos e cria os *tokens*. Vale ressaltar que essa função é sensível aos nomes dos políticos e nomes de partidos, ou seja, ela não divide um nome composto em dois *tokens* diferentes. Exemplo:<br>\n","Tokenização padrão: `'José Silva' --> ['José', 'Silva']`<br>\n","Tokenização sensível: `'José Silva' --> ['José Silva']`"]},{"cell_type":"code","metadata":{"id":"aplBvaZlIJ3x"},"source":["def recover_citations_by_minute(citations):\n","    documents = []\n","\n","    for transcript in citations['Transcript'].unique().tolist():\n","        concatenate = ''\n","        for text in citations['Text'].loc[citations['Transcript'] == transcript]:\n","            concatenate += text + ' '\n","        documents.append(concatenate)\n","\n","    return documents\n","\n","def recover_all_citations(citations):\n","    documents = recover_citations_by_minute(citations)\n","\n","    text_all = ''\n","    for text in documents:\n","        text_all += text + ' '\n","    \n","    return text_all\n","\n","def tokenization(text):\n","    chars_to_remove = \"!\\\"#$%&'()*+,¸./:;<=>?@[\\]^_`{|}-–⎯—«»´°‘’…~ªº€0123456789\"\n","    for char in chars_to_remove:\n","        text = text.replace(char, ' ')\n","    text = text.replace('CDS PP', 'CDS-PP')\n","\n","    #Passando pessoas e partidos para um único token concatenado\n","    person_map = {}\n","    for person in pd.Series(minutes['Person'].unique()).to_list():\n","        person_map[''.join(person.lower().split())] = person\n","\n","    party_map = {}\n","    for party in pd.Series(minutes['Party'].unique()).to_list():\n","        party = str(party)\n","        party_map[''.join(party.lower().split())] = party\n","\n","    #Aplicando token único no texto\n","    for person in person_map:\n","        text = text.replace(person_map[person], person)\n","    for party in party_map:\n","        party = str(party)\n","        text = text.replace(party_map[party], party)\n","\n","    #Colocando todo o texto em lowercase e separando palavras\n","    text = text.lower()\n","    words = text.split()\n","\n","    #Deixando nomes de pessoas como tokens legiveis novamente\n","    for i, word in enumerate(words):\n","        if word in person_map:\n","            words[i] = person_map[word]\n","        elif word in party_map:\n","            words[i] = party_map[word]\n","\n","    return words\n","\n","tokens = tokenization(recover_all_citations(minutes))\n","minutes['Tokenized_Text'] = minutes['Text'].apply(tokenization)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"e-5X18Baju13"},"source":["# **Lista de stopwords personalizada**\n","\n","---\n","\n","A proposta nessa etapa é filtrar as *stopwords* que existem no nosso vocabulário, entende-se por *stopword* palavras que são bastante frequentes em uma língua, mas que carregam pouca relevância semância, como exemplo artigos (“o” ou “uma”) e preposições (“de”) geralmente são *stopwords*. Para a filtragem vamos utilizar não só uma lista de *stopwords* para português do `NLTK` como também selecionaremos algumas palavras específicas que são *stopwords* no nosso contexto utilizando a Lei de Zipf.\n","\n","`create_zipf_table`: Essa função irá retornar uma tabela de dados na forma de `pd.DataFrame` contendo a uma palavra (word), o número de vezes que essa palavra apareceu (frequency) e o ranque dessa palavra (rank).\n","<br><br>\n","`objective`: Função auxiliar para traçar a curva $f(x) = \\frac{c}{x}$\n","<br><br>\n","`show_zipf_graph`: Está função gera um gráfico da frequência pelo rank de cada palavra usando a tabela gerada pela função anterior, estimando $c$ com um *fitting* dos dados.\n","<br><br>\n"]},{"cell_type":"code","metadata":{"id":"JNiKGCPDjvsK","colab":{"base_uri":"https://localhost:8080/","height":580},"executionInfo":{"status":"ok","timestamp":1623636380067,"user_tz":180,"elapsed":1984,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GipjzEo8ZMU7T5CScvwquuNadVZOv9a7EefCtELMQ=s64","userId":"00423683093258305256"}},"outputId":"85475e18-91be-44d9-a1f5-546201815a3b"},"source":["def create_zipf_table(words, top='all'):\n","    if top == 'all':\n","        frequencies = collections.Counter(words).most_common()\n","    if top != 'all':\n","        frequencies = collections.Counter(words).most_common(top)\n","\n","    zipf_table = []\n","\n","    top_frequency = frequencies[0][1]\n","\n","    for index, item in enumerate(frequencies, start=1):\n","        zipf_table.append({\n","            \"rank\" : index,\n","            \"word\" : item[0],\n","            \"frequency\" : item[1],\n","        })\n","\n","    return pd.DataFrame(zipf_table)\n","\n","def objective (x, c):\n","    return c/x\n","\n","def show_zipf_graph(words, top=50, with_tendency=True):\n","    df = create_zipf_table(words, top)\n","\n","    sns.set(rc={'figure.figsize':(16,8)})\n","    ax = sns.barplot(x='word', y='frequency', data=df)\n","    ax.set_title('Zipf Law', fontsize='xx-large', fontweight='bold', y=1.05)\n","    ax.set_xlabel('Words', fontsize='large', fontweight='semibold')\n","    ax.set_ylabel('Frequencies', fontsize='large', fontweight='semibold')\n","    ax.tick_params(axis='x', rotation=90)\n","\n","    if with_tendency:\n","        x = df['rank']\n","        y = df['frequency']\n","\n","        c, _ = curve_fit(objective, x, y)\n","\n","        math = pd.DataFrame()\n","        math['x'] = np.arange(1, len(create_zipf_table(words))+0.1, 0.1)\n","        math['f'] = c[0]/math['x']\n","\n","        sns.lineplot(x='x', y='f', data=math[5:top*10], color='red', linewidth=2)\n","    \n","    plt.show()\n","\n","show_zipf_graph(tokens, 75)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x576 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"fG3H308VkHbQ"},"source":["Podemos ver que as primeiras palavras que aparecem são as nossas *stopwords* \"de sempre\", vamos então remover elas utilziando a lista do `NLTK` para vermos se algumas palavras do nosso vocabulário se comportam como *stopwords*:"]},{"cell_type":"code","metadata":{"id":"m39ESSU3jvuz","colab":{"base_uri":"https://localhost:8080/","height":598},"executionInfo":{"status":"ok","timestamp":1623636384762,"user_tz":180,"elapsed":4703,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GipjzEo8ZMU7T5CScvwquuNadVZOv9a7EefCtELMQ=s64","userId":"00423683093258305256"}},"outputId":"a3d4e641-ae5d-4ff2-c49b-45b668a7d535"},"source":["stopwords = nltk.corpus.stopwords.words('portuguese')\n","clean_words = [word for word in tokens if word not in stopwords]\n","zipf_table = create_zipf_table(clean_words)\n","show_zipf_graph(clean_words, 75, with_tendency=True)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x576 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"MjJB9GpXj37G"},"source":["Podemos perceber que a palavra \"sr\" tem um comportamento absurdamente discrepante dos outros, mas mesmo assim podemos perceber que as primeiras palavras até \"deputados\" apresentam muitas citação e não adicionam muito significado (para o nosso contexto específico), dessa forma vamos adicionar essas palavras à nossa lista de *stopwords* personalizada.\n","\n","Como uma forma também de simplificar o nosso vocabulário é interessante remover as palavras que aparecem uma única vez, elas não agregam muito no sentido de que tem muito poucas aparições e dificultam a extração de *features* realmente relevantes. Vamos olhar algumas estatísticas:"]},{"cell_type":"code","metadata":{"cellView":"form","id":"xm6xYJYH0F_f","colab":{"base_uri":"https://localhost:8080/","height":354},"executionInfo":{"status":"ok","timestamp":1623636384766,"user_tz":180,"elapsed":17,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GipjzEo8ZMU7T5CScvwquuNadVZOv9a7EefCtELMQ=s64","userId":"00423683093258305256"}},"outputId":"e0c4124f-5b23-4fa4-a27a-941fc441d9fa"},"source":["#@title \n","\n","\n","print('1) Tamanho do Vocabulário .............................. ', len(zipf_table))\n","print('2) Média da frequência com todas as palavras ........... ', round(zipf_table['frequency'].mean()))\n","print('3) Quantidade de palavras com 1 citação ................ ', len(zipf_table.loc[zipf_table['frequency'] == 1]))\n","print('4) Porcentagem de palavras com 1 citação ............... ', str(round(len(zipf_table.loc[zipf_table['frequency'] == 1])/len(zipf_table), 4)*100)+'%')\n","print('5) Média da frequência sem palavras únicas ............. ', round(zipf_table['frequency'].loc[zipf_table['frequency'] != 1].mean()))\n","print('6) Quantidade de palavras com mais de 3500 citações .... ', len(zipf_table.loc[zipf_table['frequency'] >= 3500]))\n","print('7) Porcentagem de palavras com mais de 3500 citações ... ', str(round(len(zipf_table.loc[zipf_table['frequency'] >= 3500])/len(zipf_table), 4)*100)+'%')\n","\n","zipf_table.head(6)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1) Tamanho do Vocabulário ..............................  30979\n","2) Média da frequência com todas as palavras ...........  26\n","3) Quantidade de palavras com 1 citação ................  11220\n","4) Porcentagem de palavras com 1 citação ...............  36.22%\n","5) Média da frequência sem palavras únicas .............  40\n","6) Quantidade de palavras com mais de 3500 citações ....  10\n","7) Porcentagem de palavras com mais de 3500 citações ...  0.03%\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>rank</th>\n","      <th>word</th>\n","      <th>frequency</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>sr</td>\n","      <td>16839</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>governo</td>\n","      <td>5814</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>srs</td>\n","      <td>4851</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>Presidente</td>\n","      <td>4811</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>deputado</td>\n","      <td>4718</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>6</td>\n","      <td>deputados</td>\n","      <td>4617</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   rank        word  frequency\n","0     1          sr      16839\n","1     2     governo       5814\n","2     3         srs       4851\n","3     4  Presidente       4811\n","4     5    deputado       4718\n","5     6   deputados       4617"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"1-pjYunZ0DUJ"},"source":["Vamos criar então nossa lista de *stopwords* personalizada e filtrar os nossos *tokens*, não podemos esquecer de fazer esse processo também com o nosso *dataset*, vamos ainda usar essa parte para incluir algumas correções para algumas falhas que surgiram no processo de *tokenização*, por exemplo temos um *token* `n` com uma quantidade razoável de aparições que provavelmente surgiu após removermos o símbolo em `n°`.\n","\n","`create_stopwordslist`: Função serve apenas para carregar as *stopwords* personalizadas e organizar em que parte do código isso está sendo feito.\n","<br><br>\n","`clean_my_tokens`: Está função pega apenas os *tokens* que não estão na lista de *stopwords*, vale ressaltar que como essa função demora um tempo considerável para rodar foi criado um arquivo de *checkpoint*, então o programa vai sempre tentar carregar esse arquivo feito (muito mais rápido) caso esse arquivo exista."]},{"cell_type":"code","metadata":{"id":"nuS545z7m9LK"},"source":["def create_stopwordslist(zipf_table):\n","    # Palavras com apenas 1 aparição\n","    frequency_1_tokens = list(set(zipf_table['word'].loc[zipf_table['frequency'] == 1].to_list()))\n","\n","    # Tokens com apenas 1 caractere\n","    len_1_tokens = ['t', 's', 'á', 'l', 'v', 'm', 'p', 'b', '¾', 'g', 'n', 'i', 'h', 'f', 'x', 'r', 'ó', 'c', 'd']\n","\n","    # Lista de Stopwords customizada\n","    custom_stopwords = [\n","        'sr',\n","        'sra',\n","        'srs',\n","        'sras',\n","        'ser',\n","        'governo',\n","        'estado',\n","        'deputado',\n","        'deputada',\n","        'deputados',\n","        'deputadas',\n","        'Presidente',\n","        'presidente',\n","        'xiv',\n","    ]\n","\n","    new_stopwords = frequency_1_tokens + len_1_tokens + custom_stopwords\n","\n","    return new_stopwords\n","\n","def clean_my_tokens(tokens, stopwords):\n","    #Checa se tem o arquivo de tokens limpos\n","    if os.path.isfile('clean_tokens.pkl'):\n","        with open('clean_tokens.pkl', 'rb') as f:\n","            clean_tokens = pickle.load(f)\n","    #Limpa os tokens e salva em arquivo --> Demorado\n","    else:\n","        clean_tokens = [w for w in clean_words if w not in stopwords]\n","        with open('clean_tokens.pkl', 'wb') as f:\n","            pickle.dump(clean_tokens, f)\n","    \n","    return clean_tokens\n","\n","def clean_my_df(df_tokens, stopwords=nltk.corpus.stopwords.words('portuguese')+create_stopwordslist(zipf_table)):\n","    return [token for token in df_tokens if token not in stopwords]\n","\n","def load_clean_df(citations, stopwords):\n","    if os.path.isfile('clean_df.pkl'):\n","        with open('clean_df.pkl', 'rb') as f:\n","            citations = pickle.load(f)\n","    #Limpa os tokens e salva em arquivo --> Demorado\n","    else:\n","        citations['Clean_Tokens'] = citations['Tokenized_Text'].apply(clean_my_df)\n","        with open('clean_df.pkl', 'wb') as f:\n","            pickle.dump(citations, f)\n","    return citations\n","\n","new_stopwords = create_stopwordslist(zipf_table)\n","clean_tokens = clean_my_tokens(clean_words, new_stopwords)\n","minutes = load_clean_df(minutes, stopwords+new_stopwords)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gIaiuAOat5G5"},"source":["frequency_1_tokens = list(set(zipf_table['word'].loc[zipf_table['frequency'] == 1].to_list()))\n","len_1_tokens = ['t', 's', 'á', 'l', 'v', 'm', 'p', 'b', '¾', 'g', 'n', 'i', 'h', 'f', 'x', 'r', 'ó', 'c', 'd']\n","custom_stopwords = ['sr', 'sra', 'srs', 'sras', 'ser', 'governo', 'estado', 'deputado', 'deputada', 'deputados', 'deputadas', 'Presidente', 'presidente', 'xiv',]\n","stopwords = nltk.corpus.stopwords.words('portuguese')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WEsW1pNouRTk"},"source":["with open(\"complete_stopwords_set.txt\", \"w\") as outfile:\n","    outfile.write(\"\\n\".join(frequency_1_tokens+len_1_tokens+custom_stopwords+stopwords))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"g9kyMrctdMz_"},"source":["# **Lematização**\n","\n","---\n","\n","Essa etapa se trata de uma simplificação lexical do texto, as palavras se apresentam em diversas formas diferentes em flexões de gênero, número e tempo; nesse sentido a lematização entra para aglutinar várias dessas formas em um único *token* que corresponde ao modo infinitivo no caso de verbos e do masculino singular para o caso de substantivos e adjetivos.\n","\n","Para isso usaremos a biblioteca `spaCy` que contém uma função de lematizador para português:\n","\n","`normalize_my_tokens`: Retorna os lemmas das palavras.\n"]},{"cell_type":"code","metadata":{"id":"ik1sUqas_2W-"},"source":["nlp = spacy.load('pt_core_news_lg', exclude=['attribute_ruler', 'tok2vec', 'morphologizer',\n","                                             'parser', 'senter', 'ner', 'attribute_ruler'])\n","\n","nlp.max_length = 6136000\n","\n","def normalize_my_tokens(clean_tokens):\n","    if os.path.isfile('normalized_tokens.pkl'):\n","        with open('normalized_tokens.pkl', 'rb') as f:\n","            normalized_tokens = pickle.load(f)\n","\n","    else:\n","        meaningful_string = ' '.join(clean_tokens)\n","        spacy_object = nlp(meaningful_string)\n","        normalized_tokens = [token.lemma_ for token in spacy_object]\n","        with open('normalized_tokens.pkl', 'wb') as f:\n","            pickle.dump(normalized_tokens, f)\n","    \n","    return normalized_tokens\n","\n","def normalize_my_df(df_tokens):\n","    meaningful_string = ' '.join(df_tokens)\n","    spacy_object = nlp(meaningful_string)\n","    normalized_tokens = [token.lemma_ for token in spacy_object]\n","    return normalized_tokens\n","\n","def load_normalized_df(citations):\n","    if os.path.isfile('normalized_df.pkl'):\n","        with open('normalized_df.pkl', 'rb') as f:\n","            citations = pickle.load(f)\n","    else:\n","        citations['Normalized_Tokens'] = citations['Clean_Tokens'].apply(normalize_my_df)\n","        with open('normalized_df.pkl', 'wb') as f:\n","            pickle.dump(citations, f)\n","    return citations\n","  \n","normalized_tokens = normalize_my_tokens(clean_tokens)\n","minutes = load_normalized_df(minutes)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VVUwcJDlGjuJ","executionInfo":{"status":"ok","timestamp":1623637220361,"user_tz":180,"elapsed":27,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GipjzEo8ZMU7T5CScvwquuNadVZOv9a7EefCtELMQ=s64","userId":"00423683093258305256"}},"outputId":"cdcd9c86-16c8-459a-cf6f-71bb2aad27c6"},"source":["minutes['Normalized_Tokens'][0]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['dirigir',\n"," 'abraçar',\n"," 'todo',\n"," 'neste',\n"," 'regressar',\n"," 'plenário',\n"," 'casar',\n"," 'democracia',\n"," 'esperar',\n"," 'nesta',\n"," 'altura',\n"," 'poder',\n"," 'ter',\n"," 'regrar',\n"," 'flexível',\n"," 'infelizmente',\n"," 'número',\n"," 'consequência',\n"," 'concreto',\n"," 'permitir',\n"," 'tal',\n"," 'portanto',\n"," 'continuar',\n"," 'essencial',\n"," 'regrar',\n"," 'último',\n"," 'plenário',\n"," 'sessão',\n"," 'legislativo',\n"," 'ordem',\n"," 'dia',\n"," 'constar',\n"," 'declaração',\n"," 'político',\n"," 'porém',\n"," 'antar',\n"," 'disso',\n"," 'Secretária',\n"," 'Maria',\n"," 'da',\n"," 'Luz',\n"," 'Rosinha',\n"," 'fazer',\n"," 'favor',\n"," 'anunciar',\n"," 'entrar',\n"," 'algum',\n"," 'iniciativo',\n"," 'palavra',\n"," 'Secretária']"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"KhSclvOsl8r-"},"source":["---\n","---\n","---\n","---\n","---"]},{"cell_type":"markdown","metadata":{"id":"7kHF5xULvClb"},"source":["# Doc2Vec\n","\n","Nessa etapa vamos fazer o Embedding, não de palavras mas de toda uma fala \n","\n","--> Melhorar"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Dgk6IEcqWWqh","executionInfo":{"status":"ok","timestamp":1623637750786,"user_tz":180,"elapsed":632,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GipjzEo8ZMU7T5CScvwquuNadVZOv9a7EefCtELMQ=s64","userId":"00423683093258305256"}},"outputId":"e0403e07-37bb-4601-dc26-d571ac51b6ad"},"source":["minutes.replace('nan', np.nan, inplace=True)\n","\n","minutes"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/missing.py:49: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n","  mask = arr == x\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Transcript</th>\n","      <th>Date</th>\n","      <th>Position</th>\n","      <th>Person</th>\n","      <th>Party</th>\n","      <th>Text</th>\n","      <th>Subject</th>\n","      <th>Y_true</th>\n","      <th>Tokenized_Text</th>\n","      <th>Clean_Tokens</th>\n","      <th>Normalized_Tokens</th>\n","      <th>Vectors</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>DAR-001</td>\n","      <td>17 DE SETEMBRO DE 2020</td>\n","      <td>0</td>\n","      <td>Presidente</td>\n","      <td>NaN</td>\n","      <td>Dirijo um abraço a todos neste regresso dos Pl...</td>\n","      <td>Declarações políticas 1</td>\n","      <td>NaN</td>\n","      <td>[dirijo, um, abraço, a, todos, neste, regresso...</td>\n","      <td>[dirijo, abraço, todos, neste, regresso, plená...</td>\n","      <td>[dirigir, abraçar, todo, neste, regressar, ple...</td>\n","      <td>[0.07311273, 0.19357719, 0.22480428, -0.063937...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>DAR-001</td>\n","      <td>17 DE SETEMBRO DE 2020</td>\n","      <td>1</td>\n","      <td>Secretária</td>\n","      <td>Maria da Luz Rosinha</td>\n","      <td>Sr. Presidente, muito boa tarde a todas e a to...</td>\n","      <td>Declarações políticas 1</td>\n","      <td>NaN</td>\n","      <td>[sr, Presidente, muito, boa, tarde, a, todas, ...</td>\n","      <td>[boa, tarde, todas, todos, deram, entrada, mes...</td>\n","      <td>[bom, tardar, todo, todo, dar, entrar, mesa, a...</td>\n","      <td>[-0.014763019, 0.07558241, 0.23962364, -0.0942...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>DAR-001</td>\n","      <td>17 DE SETEMBRO DE 2020</td>\n","      <td>2</td>\n","      <td>Presidente</td>\n","      <td>NaN</td>\n","      <td>Como os Srs. Deputados estão a verificar, o an...</td>\n","      <td>Declarações políticas 1</td>\n","      <td>NaN</td>\n","      <td>[como, os, srs, deputados, estão, a, verificar...</td>\n","      <td>[verificar, anúncio, expediente, segue, regras...</td>\n","      <td>[verificar, anúncio, expediente, seguir, regra...</td>\n","      <td>[0.077995464, 0.077945486, 0.24408053, 0.06846...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>DAR-001</td>\n","      <td>17 DE SETEMBRO DE 2020</td>\n","      <td>3</td>\n","      <td>Secretária</td>\n","      <td>Maria da Luz Rosinha</td>\n","      <td>Sr. Presidente, deram também entrada os Projet...</td>\n","      <td>Declarações políticas 1</td>\n","      <td>NaN</td>\n","      <td>[sr, Presidente, deram, também, entrada, os, p...</td>\n","      <td>[deram, entrada, projetos, lei, IL, BE, BE, in...</td>\n","      <td>[dar, entrar, projetos, lei, IL, BE, BE, inscr...</td>\n","      <td>[-0.15495323, 0.15008701, 0.0630704, -0.275004...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>DAR-001</td>\n","      <td>17 DE SETEMBRO DE 2020</td>\n","      <td>4</td>\n","      <td>Presidente</td>\n","      <td>Eduardo Luís Barreto Ferro Rodrigues</td>\n","      <td>Muito obrigado, Sr.ª Secretária Maria da Luz R...</td>\n","      <td>Declarações políticas 2</td>\n","      <td>1.0</td>\n","      <td>[muito, obrigado, sr, Secretária, Maria da Luz...</td>\n","      <td>[obrigado, Secretária, Maria da Luz Rosinha, p...</td>\n","      <td>[obrigar, Secretária, Maria, da, Luz, Rosinha,...</td>\n","      <td>[0.21954368, 0.25366783, 0.20534772, -0.032518...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>11300</th>\n","      <td>DAR-047</td>\n","      <td>26 DE FEVEREIRO DE 2021</td>\n","      <td>184</td>\n","      <td>Presidente</td>\n","      <td>António Filipe</td>\n","      <td>Muito obrigado.</td>\n","      <td>Projeto de Resolução 899/XIV, Projeto de Resol...</td>\n","      <td>NaN</td>\n","      <td>[muito, obrigado]</td>\n","      <td>[obrigado]</td>\n","      <td>[obrigar]</td>\n","      <td>[0.021418225, 0.040000994, 0.075700805, 0.0082...</td>\n","    </tr>\n","    <tr>\n","      <th>11301</th>\n","      <td>DAR-047</td>\n","      <td>26 DE FEVEREIRO DE 2021</td>\n","      <td>185</td>\n","      <td>Lara Martinho</td>\n","      <td>PS</td>\n","      <td>Sr. Presidente, peço a palavra.</td>\n","      <td>Projeto de Resolução 899/XIV, Projeto de Resol...</td>\n","      <td>NaN</td>\n","      <td>[sr, Presidente, peço, a, palavra]</td>\n","      <td>[peço, palavra]</td>\n","      <td>[pedir, palavra]</td>\n","      <td>[0.037031855, 0.0029219515, 0.0028015126, -0.0...</td>\n","    </tr>\n","    <tr>\n","      <th>11302</th>\n","      <td>DAR-047</td>\n","      <td>26 DE FEVEREIRO DE 2021</td>\n","      <td>186</td>\n","      <td>Presidente</td>\n","      <td>António Filipe</td>\n","      <td>Para que efeito, Sr.ª Deputada?</td>\n","      <td>Projeto de Resolução 899/XIV, Projeto de Resol...</td>\n","      <td>NaN</td>\n","      <td>[para, que, efeito, sr, deputada]</td>\n","      <td>[efeito]</td>\n","      <td>[efeito]</td>\n","      <td>[0.050258167, 0.051150993, 0.07252804, 0.00230...</td>\n","    </tr>\n","    <tr>\n","      <th>11303</th>\n","      <td>DAR-047</td>\n","      <td>26 DE FEVEREIRO DE 2021</td>\n","      <td>187</td>\n","      <td>Lara Martinho</td>\n","      <td>PS</td>\n","      <td>Sr. Presidente, queria apenas informar a Mesa ...</td>\n","      <td>Projeto de Resolução 899/XIV, Projeto de Resol...</td>\n","      <td>NaN</td>\n","      <td>[sr, Presidente, queria, apenas, informar, a, ...</td>\n","      <td>[queria, apenas, informar, mesa, grupo, parlam...</td>\n","      <td>[querer, apenas, informar, mesa, grupar, parla...</td>\n","      <td>[0.039318025, 0.11547891, 0.10105525, 0.030340...</td>\n","    </tr>\n","    <tr>\n","      <th>11304</th>\n","      <td>DAR-047</td>\n","      <td>26 DE FEVEREIRO DE 2021</td>\n","      <td>188</td>\n","      <td>Presidente</td>\n","      <td>António Filipe</td>\n","      <td>Fica registado, Sr.ª Deputada. Srs. Deputados,...</td>\n","      <td>Projeto de Resolução 899/XIV, Projeto de Resol...</td>\n","      <td>NaN</td>\n","      <td>[fica, registado, sr, deputada, srs, deputados...</td>\n","      <td>[fica, registado, plenário, volta, reunir, pró...</td>\n","      <td>[ficar, registar, plenário, voltar, reunir, pr...</td>\n","      <td>[0.029797949, 0.34849533, 0.054173313, -0.1619...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>11305 rows × 12 columns</p>\n","</div>"],"text/plain":["      Transcript  ...                                            Vectors\n","0        DAR-001  ...  [0.07311273, 0.19357719, 0.22480428, -0.063937...\n","1        DAR-001  ...  [-0.014763019, 0.07558241, 0.23962364, -0.0942...\n","2        DAR-001  ...  [0.077995464, 0.077945486, 0.24408053, 0.06846...\n","3        DAR-001  ...  [-0.15495323, 0.15008701, 0.0630704, -0.275004...\n","4        DAR-001  ...  [0.21954368, 0.25366783, 0.20534772, -0.032518...\n","...          ...  ...                                                ...\n","11300    DAR-047  ...  [0.021418225, 0.040000994, 0.075700805, 0.0082...\n","11301    DAR-047  ...  [0.037031855, 0.0029219515, 0.0028015126, -0.0...\n","11302    DAR-047  ...  [0.050258167, 0.051150993, 0.07252804, 0.00230...\n","11303    DAR-047  ...  [0.039318025, 0.11547891, 0.10105525, 0.030340...\n","11304    DAR-047  ...  [0.029797949, 0.34849533, 0.054173313, -0.1619...\n","\n","[11305 rows x 12 columns]"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"eAERR9gZBOzq"},"source":["#doc2vec\n","sentences = minutes['Normalized_Tokens'].to_list()\n","documents = [TaggedDocument(doc, [i]) for i, doc in enumerate(sentences)]\n","\n","d2v_100 = Doc2Vec(\n","        documents=documents,\n","        vector_size=100,\n","        window=2,\n","        min_count=1\n","    )\n","d2v_300 = Doc2Vec(\n","        documents=documents,\n","        vector_size=300,\n","        window=2,\n","        min_count=1\n","    )\n","d2v_50 = Doc2Vec(\n","        documents=documents,\n","        vector_size=50,\n","        window=2,\n","        min_count=1\n","    )\n","d2v_10 = Doc2Vec(\n","        documents=documents,\n","        vector_size=10,\n","        window=2,\n","        min_count=1\n","    )\n","\n","# word2vec\n","\n","def create_word2vec_model(df, vector_size=100, window_size=5, sg_=1):\n","    sentences = df['Normalized_Tokens'].to_list()\n","    \n","    model = Word2Vec(\n","        sentences=sentences,\n","        size=vector_size,\n","        window=window_size,\n","        sg=sg_\n","        )\n","    \n","    return model\n","\n","def create_doc2vec_model(df, vector_size=20, window_size=2):\n","    sentences = df['Normalized_Tokens'].to_list()\n","\n","    documents = [TaggedDocument(doc, [i]) for i, doc in enumerate(sentences)]\n","    model = Doc2Vec(\n","        documents=documents,\n","        vector_size=vector_size,\n","        window=window_size,\n","    )\n","\n","    return model\n","\n","doc2vec = create_doc2vec_model(minutes)\n","word2vec_100 = create_word2vec_model(minutes, vector_size=100)\n","word2vec_300 = create_word2vec_model(minutes, vector_size=300)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NPm8iIofNhre"},"source":["vectors = []\n","for i in range(len(minutes)):\n","    vectors.append(doc2vec.infer_vector(minutes['Normalized_Tokens'][i]))\n","\n","minutes['Vectors'] = pd.Series(vectors)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":357},"id":"RttWtzNJ-5VE","executionInfo":{"status":"error","timestamp":1623637300245,"user_tz":180,"elapsed":422,"user":{"displayName":"Enzo Bustos da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GipjzEo8ZMU7T5CScvwquuNadVZOv9a7EefCtELMQ=s64","userId":"00423683093258305256"}},"outputId":"ba533f81-2a06-44fe-ecb7-faf1ea4d1b2b"},"source":["vectors = []\n","\n","for sentence in minutes['Normalized_Tokens']:\n","    act_sentence = []\n","    for word in sentence:\n","        if word not in ['vocação']:\n","            act_sentence.append(word2vec_100.wv[word])\n","    vectors.append(np.array(act_sentence))"],"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-f704987077f0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msentence\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'vocação'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m             \u001b[0mact_sentence\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mword2vec_100\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwv\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m     \u001b[0mvectors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mact_sentence\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/gensim/models/keyedvectors.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, entities)\u001b[0m\n\u001b[1;32m    335\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mentities\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstring_types\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    336\u001b[0m             \u001b[0;31m# allow calls like trained_model['office'], as a shorthand for trained_model[['office']]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 337\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_vector\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mentities\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    338\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    339\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mvstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_vector\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mentity\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mentity\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mentities\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/gensim/models/keyedvectors.py\u001b[0m in \u001b[0;36mget_vector\u001b[0;34m(self, word)\u001b[0m\n\u001b[1;32m    453\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    454\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_vector\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mword\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 455\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mword_vec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    456\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    457\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mwords_closer_than\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mw1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mw2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/gensim/models/keyedvectors.py\u001b[0m in \u001b[0;36mword_vec\u001b[0;34m(self, word, use_norm)\u001b[0m\n\u001b[1;32m    450\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    451\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 452\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"word '%s' not in vocabulary\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mword\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    453\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    454\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_vector\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mword\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"word 'ramal' not in vocabulary\""]}]},{"cell_type":"code","metadata":{"id":"ma4CW25CUTzV"},"source":["minutes.replace('nan', np.nan, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CMsbBeDOXI7r"},"source":["minutes.to_excel('with_clean_texts.xlsx', index=False)"],"execution_count":null,"outputs":[]}]}